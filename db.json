{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1580494272000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1580494272000},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1580494272000},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1580494272000},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1580494272000},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1580494272000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1580494272000},{"_id":"themes/next/README.md","hash":"dc026053a4d9fb97a58dbc3e9060e480f6852b23","modified":1580494272000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1580494272000},{"_id":"themes/next/_config.yml","hash":"67eab8d63167af8ae64be7067683784caffe8a13","modified":1594530531765},{"_id":"themes/next/gulpfile.js","hash":"72e6d5a6e32d5f95d82e4c4d0c963d39555bb760","modified":1580494272000},{"_id":"themes/next/package.json","hash":"213bd6ff96a027f5db6d1ce966a2cc75499a3e10","modified":1580494272000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ef63f34bd3b6bd4d7304d48ce5e0e3e2bead385","modified":1580494272000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1580494272000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"715dcf9b0429a4a4c7107d6d1d00a34e4cf9aa99","modified":1580494272000},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1580494272000},{"_id":"themes/next/.github/config.yml","hash":"e4f4b9afe59bc508c4f7634895b33d7d460a7cb1","modified":1580494272000},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1580494272000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1580494272000},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1580494272000},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1580494272000},{"_id":"themes/next/.github/stale.yml","hash":"941209526c2f7d916c76163c9e1ac1af9d956679","modified":1580494272000},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1580494272000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"5b4c013e0598b3211ebd899265936cfdaf7c139f","modified":1580494272000},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1580494272000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"40a8089076005e0d26ef7c0db58a2b5b464cda6c","modified":1580494272000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1580494272000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"08cda41b4bcf687facfda19ab39718ec7a05ae54","modified":1580494272000},{"_id":"themes/next/docs/MATH.md","hash":"f520b336f16665e164d6edf075bdcc6aa17b31bc","modified":1580494272000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1580494272000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"682937d48bf5d243842a76190921322e26c75247","modified":1580494272000},{"_id":"themes/next/languages/de.yml","hash":"3530753456db8a7a7cb72b47505bf6197ac9a9f2","modified":1580494272000},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1580494272000},{"_id":"themes/next/languages/en.yml","hash":"2c415150d5ba44a05ec7ca5fa671d6129c7fe7db","modified":1580494272000},{"_id":"themes/next/languages/es.yml","hash":"9596836628169400beed4124eeb5867821075b00","modified":1580494272000},{"_id":"themes/next/languages/fr.yml","hash":"30702ddcb121ee1ada258b8b900d826fec697e5e","modified":1580494272000},{"_id":"themes/next/languages/fa.yml","hash":"c77d0ab86695651f4fb09e0e9af484114fe80292","modified":1580494272000},{"_id":"themes/next/languages/hu.yml","hash":"a317ba3ab2d9de40fe8b5447d0e63b9d8ab97c8b","modified":1580494272000},{"_id":"themes/next/languages/id.yml","hash":"85441f625f1f93a329b7eab01f919e81a6f36172","modified":1580494272000},{"_id":"themes/next/languages/nl.yml","hash":"dea4d7d516071c9ec9e57935a84aaab15c3d2e97","modified":1580494272000},{"_id":"themes/next/languages/ko.yml","hash":"04ba65574f1fa63ffb95fcfb7a4515ee4b01532f","modified":1580494272000},{"_id":"themes/next/languages/ja.yml","hash":"2a767bc258a5072f8d97ffdfce53b4e2332570f4","modified":1580494272000},{"_id":"themes/next/languages/it.yml","hash":"8e4d494cd7f4e33d2c416da3a48f9bd8968243ea","modified":1580494272000},{"_id":"themes/next/languages/pt-BR.yml","hash":"66e3cc8efc2a26184fcbe4db8981b84099348276","modified":1580494272000},{"_id":"themes/next/languages/pt.yml","hash":"f184ffed48395675a7025cb1ccfdade546f3e987","modified":1580494272000},{"_id":"themes/next/languages/ru.yml","hash":"79f7f3b6e96184cf21ce2c9a2adb01b0f0228cf8","modified":1580494272000},{"_id":"themes/next/languages/tr.yml","hash":"5c5b60faa00401e822c92abcdcf9c5d410a8b753","modified":1580494272000},{"_id":"themes/next/languages/vi.yml","hash":"2b698896b08d79333a3414185fc2b445b3657361","modified":1580494272000},{"_id":"themes/next/languages/uk.yml","hash":"a6af58b5351e0d0dde1fec22a3e80fc76bd8eecf","modified":1580494272000},{"_id":"themes/next/languages/zh-CN.yml","hash":"ab2fa8bfdbf4afd77c336412f29930dc8256a5fa","modified":1580494272000},{"_id":"themes/next/languages/zh-HK.yml","hash":"6e333aaca52dccee8e5f2d1dc28b0a6cda7b0c9a","modified":1580494272000},{"_id":"themes/next/languages/zh-TW.yml","hash":"d4517fa82652ccc75915469985efd7da1895963a","modified":1580494272000},{"_id":"themes/next/layout/_layout.swig","hash":"29ee038b0d5ffdb45327598733ea968588367769","modified":1580494272000},{"_id":"themes/next/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1580494272000},{"_id":"themes/next/layout/archive.swig","hash":"26526c09a4334099e2141456697696fcd1f9783f","modified":1580494272000},{"_id":"themes/next/layout/post.swig","hash":"382d9f9a9b35e1f369585f7f9f9b5dd6fa58d2f0","modified":1580494272000},{"_id":"themes/next/layout/index.swig","hash":"3bc6fb1e9707d74b96e1346d3f03fe6584f764f4","modified":1580494272000},{"_id":"themes/next/layout/page.swig","hash":"e61d64c055b6497a04affc143f47fdd0a6dc495b","modified":1580494272000},{"_id":"themes/next/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1580494272000},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1580494272000},{"_id":"source/_posts/1.md","hash":"1717c3d8a56c569e809ea9c35cc8e7bca151305f","modified":1594530619625},{"_id":"source/_posts/2.md","hash":"302f5ce0fe53d60b7569bf49b2d749f009ca930d","modified":1594530630667},{"_id":"source/_posts/3.md","hash":"9e6a6227c91d694a0416133faabaebe0621c045a","modified":1594530639572},{"_id":"source/_posts/4.md","hash":"6121c24a55ed746c531571cfd3bc616bcf39b575","modified":1594530645441},{"_id":"source/_posts/5.md","hash":"34596a8874fed1ba3726fec52f1dd3581c23889b","modified":1594530649745},{"_id":"source/_posts/js-this.md","hash":"fb6651ea95cebf6853f80620e8ad33a645b87ca6","modified":1594530703645},{"_id":"source/_posts/在服务器上部署项目.md","hash":"052dc381cbaf11aad34cb468b60e87b91669d5f5","modified":1594530696559},{"_id":"source/categories/index.md","hash":"74fdce51ed429a3834264a5bdf46844dacc13ee6","modified":1594527188675},{"_id":"source/tags/index.md","hash":"eaaba75dcdb7c9a19fedc4dd33a77a2e612c739e","modified":1594527149672},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1580494272000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"8ae029084b9ac482adf0fae2a0979dd388476513","modified":1580494272000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"7a9526f749205c882d672a4f51e6a3033c80ca6e","modified":1580494272000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"89667adbb85c25716dba607cd7a38191acf60736","modified":1580494272000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"789a3cceb8f37a4b63b1fb2452a03332a3c365ed","modified":1580494272000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1580494272000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1580494272000},{"_id":"themes/next/docs/ru/README.md","hash":"41b1bef32fb991410ebf559b4c45022549f95215","modified":1580494272000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1580494272000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"4245fe9472647226692fcbdd5a52d6e6dcd251bc","modified":1580494272000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1580494272000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"17d7203e85a8ce9760c42a853dee0f26a8f7ee4e","modified":1580494272000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1580494272000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1580494272000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"b6a3611d40863c12804c5846994786119ce3b79f","modified":1580494272000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"f0ffb74de522749c9f2fda46970a61bdafbfbc24","modified":1580494272000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"0b0b9ec6ec4a89e701a3b91f8d7d95752d3e241b","modified":1580494272000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"7f37327bbcae7ed7d04d187fd5e9bc6bbf14926a","modified":1580494272000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"0c4914a5fd08f15beec71940218c814ad9a89f3f","modified":1580494272000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1ee6335c12773dc43f8b92136770cb10d460c25c","modified":1580494272000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1580494272000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1580494272000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1580494272000},{"_id":"themes/next/layout/_macro/post.swig","hash":"87a40f829ae6bb786c6c51bd83d110140eb41b80","modified":1580494272000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e2c9db54cc9e154e882008fde6588b065fadc9a7","modified":1580494272000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1580494272000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1580494272000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"a3462c37ab6d7642b1e95860ea5c4cfbac78efab","modified":1580494272000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1580494272000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1580494272000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1580494272000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1580494272000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"dd6bd817cb69b5ad5e9746498146314b54054ff8","modified":1580494272000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1580494272000},{"_id":"themes/next/scripts/events/index.js","hash":"9047d8ae2670e43429b16a7919a08a0a0a81afe0","modified":1580494272000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1580494272000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1580494272000},{"_id":"themes/next/scripts/filters/locals.js","hash":"5bbfdc1c373542159660b7a68ed0b57ca18ad10b","modified":1580494272000},{"_id":"themes/next/scripts/filters/post.js","hash":"f2f566f2577c554377fd704442399acdd14a8118","modified":1580494272000},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1580494272000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cb211b6b50913454b1737782e9e2af96cfa40448","modified":1580494272000},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1580494272000},{"_id":"themes/next/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1580494272000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"58347687b02f7ab5e64bef07525c8efa97c9e8fb","modified":1580494272000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1580494272000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1580494272000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1580494272000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1580494272000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1580494272000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1580494272000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1580494272000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1580494272000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1580494272000},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1580494272000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1580494272000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1580494272000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1580494272000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1580494272000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1580494272000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1580494272000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1580494272000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1580494272000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1580494272000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1580494272000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1580494272000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1580494272000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1580494272000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1580494272000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1580494272000},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1580494272000},{"_id":"themes/next/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1580494272000},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1580494272000},{"_id":"themes/next/source/js/local-search.js","hash":"f2e568298c71d2417a1a1c7e56025ce5842b1220","modified":1580494272000},{"_id":"themes/next/source/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1580494272000},{"_id":"themes/next/source/js/utils.js","hash":"a1e70ac9d32697907d5d78f2533d627f4df8ebcb","modified":1580494272000},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1580494272000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1580494272000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1580494272000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"1638483d2d2dad1da4c841a6fb9f6ee96b850187","modified":1580494272000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"0172055d118d1d7f4c8379c8495c1ee1aa50c7d9","modified":1580494272000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"7487ca8f0e4b16351ea0d6b35dc52b0d32176d57","modified":1580494272000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1580494272000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"bbf0c8e42491fac70f4f8165224f1d7d92a040d7","modified":1580494272000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"e6076865dba066c5f0008e22217efb850d5af69c","modified":1580494272000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1580494272000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"54ba9508a901c295a02c8e34e9cece7c7dcad518","modified":1580494272000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1580494272000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1580494272000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1580494272000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1580494272000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"94d54b0c65d504f772af1e62424952e092b6c21d","modified":1580494272000},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"14c33bd544903e74388739599fffe3ecb66ed4b0","modified":1580494272000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1580494272000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1580494272000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"1b7faa20a458b46369779b57bcc695bbc5d1c13a","modified":1580494272000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"716b78cd90addc4216413719554721cb362b0c18","modified":1580494272000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"a2bb0bec243685e670b60a3d54142950adc03af0","modified":1580494272000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1580494272000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1580494272000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1580494272000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1580494272000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1580494272000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1580494272000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1580494272000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1580494272000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1580494272000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1580494272000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1580494272000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1580494272000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"d3dc3e051e6816cdd576d00cc70b18b8a4c6a495","modified":1580494272000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1580494272000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4d6f9e09ca4056ff6a5d4923e202126a75242183","modified":1580494272000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"ed236103bccbcf608f7d5d5b33b9f995d2f1a7de","modified":1580494272000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1580494272000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"fb27a38f9a4b8fcba4f637b03904f7a83cc73416","modified":1580494272000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1580494272000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"e456d7a2aaabe55447f78cd952b30d70a6c1e742","modified":1580494272000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1580494272000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1580494272000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"4958fa997ff6df2b2ce05341f40cc3a81b0f91bb","modified":1580494272000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"7fa72dc60c078842979861622839b109683e05a3","modified":1580494272000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1580494272000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1580494272000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"0ea0bac09b0747bc16fde852164c0eaab2efe02c","modified":1580494272000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1580494272000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"801e1d2f59f7d2db4096c4788b8469b4165f4965","modified":1580494272000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"b205d72a56b1827681f0a260c266e0c02065fd08","modified":1580494272000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1580494272000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1580494272000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1f20213af8da3127701e6bb9da995e5c91be2051","modified":1580494272000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1580494272000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1580494272000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"19cbd24880d0fbbd4d5698cd54da598f03b942da","modified":1580494272000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1580494272000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1580494272000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1580494272000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6a72b5928cdab9526a288177991e4b2aedd028cf","modified":1580494272000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1580494272000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1580494272000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0a25f3df1b5c39794365efde387647da81da884a","modified":1580494272000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"52550138127ae9ebbe049bcdacd94d767c003855","modified":1580494272000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"b9d7058db61df7bbd2b58779efe45621a06ffc18","modified":1580494272000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"50bc57e66331c0f15a4527010b4ca3316ac92403","modified":1580494272000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c261d685c5ed0df34718d94bb2ba977c0ed443e6","modified":1580494272000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d4e817e2b238ace5d7ac568ce0c5380196a6d039","modified":1580494272000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"ae2a2502b77203e83f75a040c43e86a7ecb4873c","modified":1580494272000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"f068b46f8c305c7436c2767492a6bed42dcd764c","modified":1580494272000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1580494272000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1580494272000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1580494272000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1580494272000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1580494272000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1580494272000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"80d359661d08b80ad561b97f8508766b3e1f6d01","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"47ee915d7b0a97e74140a25fbfc01c04d6781534","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"112f5e8f1fe5cec4419e87acfbdef0e615ed23f3","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"bc87cea0b534f2d75db60f300b069456f6516d1b","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"170c4598cbbe49cd1527f94158d97d2320a6b906","modified":1580494272000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4f7879a50d4608c46cc2061c725a2564597a45bd","modified":1580494272000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"d8ba44b8e1a0332c5c1079ff65fc83d2918a5865","modified":1580494272000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1580494272000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1580494272000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1580494272000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1580494272000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"8e1cc5e3b20d804a7265f945b877388bffee39eb","modified":1580494272000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1580494272000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1580494272000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1580494272000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"1693ec6b53758ac15d2c7798c789d6ae8af913ea","modified":1580494272000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4fb385d8533877678440c8faa08b68fa793cb1a2","modified":1580494272000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"24a086a6904bbf5355a354403c9b0e6069f7eb01","modified":1580494272000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"48743ac61af37a4de2026667e15a65de5e8cf542","modified":1580494272000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e321bd62f5e04d1fdc101a470ec13604e99816a5","modified":1580494272000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1580494272000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1580494272000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1580494272000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"5adf2fdea25630893283e1ad5ba1721b698d6e95","modified":1580494272000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"a54662bd4cbbe316048a811d3b5c83fb6df63739","modified":1580494272000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1580494272000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1580494272000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1580494272000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"b797c693378d94160121a2b8d9df0622a76cdbda","modified":1580494272000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"84a3b8fe07fc790082ee988dd8f6c2536fde72de","modified":1580494272000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"71a3d7f2242706f7a6b79933a67ef3664cca3a24","modified":1580494272000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0424a1fcffa1ae82fe70935972a894aca885bf9a","modified":1580494272000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1580494272000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1580494272000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1580494272000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1580494272000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1580494272000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6336c2b129db802221b1fd75e5fbe8aab85c0a1f","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"af182c0d1e52f94280f6108936914f04ed541eee","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"4b84f35e7040f9adb5cc540c366d7f9eb4c48bcc","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"5d5c022aa3b2f89c2f2a178212338bb64804dd75","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"60ed14e9ddcb138837ca22efb8886f9bff2a3dd2","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"bcba503e956e4b737b062faa66341bd880f16c10","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9df5ba77e6cf36129bddc270407215c23c60ff38","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"c7939407797acbd1ae0d8bae8e13b2bf045f870e","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"a48ed1dc9978b1b621f0e12664738c0d855d8013","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1580494272000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1580494272000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1580494272000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"b4923515ca8e44aa62e839ce948f759cfd1f896f","modified":1580494272000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"b492a45422773ab2af06ee345d527ba4c6bbc608","modified":1580494272000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1580494272000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1580494272000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1580494272000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"5bf28a03ef021c27cfd713971caca5a0b9466fd1","modified":1580494272000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"1a14c1b92d8a4dd8aabb5949333ac0ac79094c6c","modified":1580494272000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1580494272000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"d2f0f2171722533bba308f944a2ec727b083582c","modified":1580494272000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1580494272000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"f5821481440a0624c8aec5fc85f093de1527095f","modified":1580494272000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1580494272000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1580494272000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"0672ea2acf28dcc2cfc5244da36d3387d71a17cb","modified":1580494272000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"4b237e2344f35e9d1f6dbc3842d5e432d478ebfd","modified":1580494272000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"d5d85d3646d184e0340924addcfd2523fb289d00","modified":1580494272000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a7ed54e2f52185a7b6bb9a8201f6c3aa74b0cb00","modified":1580494272000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"c27b3056d5e22d3c66d8a152a23634314d5c4a60","modified":1580494272000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1580494272000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1580494272000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1580494272000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1580494272000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1580494272000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1580494272000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"521534f483440434e808f92377bc3fc73667c89a","modified":1580494272000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1580494272000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"6d8680894e24a516e2b5263af86b485767c3be63","modified":1580494272000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"9a18b186b08ec220d1b17cf83812bcdd06077814","modified":1580494272000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1580494272000},{"_id":"public/atom.xml","hash":"d76c776a4d092d04d8cd8e293ae60e4ee68f2fee","modified":1594530713781},{"_id":"public/categories/index.html","hash":"14cfdbcf6b0765a1c645d9c23c6c5653f7e30cf7","modified":1594530713781},{"_id":"public/tags/index.html","hash":"6675630a46d4b10a2f88bdde921ceef08f0f118e","modified":1594530713781},{"_id":"public/archives/index.html","hash":"6437c01450f5edb3550ad2a157ad1fa8a7110bed","modified":1594530713781},{"_id":"public/archives/2018/index.html","hash":"08dfc717210bf9e4f40fd733dc9f9c9a199501a8","modified":1594530713781},{"_id":"public/archives/2018/10/index.html","hash":"5af3303e06d71e1283f57c8e4b09ff2682e2786e","modified":1594530713781},{"_id":"public/archives/2019/index.html","hash":"3f6eae859756df8d6cc4d940e66d2db29deb5d83","modified":1594530713781},{"_id":"public/archives/2019/02/index.html","hash":"369354c9babe57976599592f95e6f9dba520b69f","modified":1594530713781},{"_id":"public/archives/2019/05/index.html","hash":"0d4cbeb074420c09ff9912331f7c3ab34febbfcd","modified":1594530713781},{"_id":"public/archives/2019/10/index.html","hash":"a88a594409e287fb0c01a80535360e55f6934e1f","modified":1594530713781},{"_id":"public/archives/2020/index.html","hash":"8dfc99a99c859a23eb7b599fd49b880d3d00377d","modified":1594530713781},{"_id":"public/archives/2020/04/index.html","hash":"de888a9afe699de9b3317b2b0a39f495410223dd","modified":1594530713781},{"_id":"public/archives/2020/07/index.html","hash":"fe0f455b34973449cb3cca836f91facd66472fb0","modified":1594530713781},{"_id":"public/categories/算法/index.html","hash":"0e0dddadbbc0dd1b85e5af257a13bbc3524cf47e","modified":1594530713781},{"_id":"public/categories/编程语言/index.html","hash":"705c02236b88a1764f07cd7ec58ed88aebdce495","modified":1594530713781},{"_id":"public/tags/C/index.html","hash":"0a33733678486999b0657f86cd1b1dde9e780adb","modified":1594530713781},{"_id":"public/2020/07/11/在服务器上部署项目/index.html","hash":"925ea5c09801d72a922be0bfc70e524997711c00","modified":1594530713781},{"_id":"public/2020/04/28/js-this/index.html","hash":"ad70a42f263f87949a81c28893623f9676397bc8","modified":1594530713781},{"_id":"public/2019/10/04/1/index.html","hash":"a4eb9ad3e4befd716ccfc0555048066095679998","modified":1594530713781},{"_id":"public/2019/05/15/5/index.html","hash":"b8fabeff886b9ec9fc14b734e487fb9e5ae31d90","modified":1594530713781},{"_id":"public/2019/05/04/2/index.html","hash":"17f44f696e7f9b98063faa66ffb28346451362b0","modified":1594530713781},{"_id":"public/2019/02/24/4/index.html","hash":"74273992244be9176e0a9f5c3ccb1edf83e72bad","modified":1594530713781},{"_id":"public/2018/10/30/3/index.html","hash":"5b5d4e03af232687d8c67e7e90dfcf650f46d3e7","modified":1594530713781},{"_id":"public/tags/JavaScript/index.html","hash":"6657af28722e2a0b3d6460fc451c5bf78125fc19","modified":1594530713781},{"_id":"public/tags/Linux/index.html","hash":"974899f9bdef18429be9d51cdb6aa15bbfbd1dd2","modified":1594530713781},{"_id":"public/index.html","hash":"761fd4fb22a13b2b66c3eaea2ab03ce8895376d4","modified":1594530713781},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1594530713781},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1594530713781},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1594530713781},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1594530713781},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1594530713781},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1594530713781},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1594530713781},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1594530713781},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1594530713781},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1594530713781},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1594530713781},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1594530713781},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1594530713781},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1594530713781},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1594530713781},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1594530713781},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1594530713781},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1594530713781},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1594530713781},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1594530713781},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1594530713781},{"_id":"public/js/local-search.js","hash":"f2e568298c71d2417a1a1c7e56025ce5842b1220","modified":1594530713781},{"_id":"public/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1594530713781},{"_id":"public/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1594530713781},{"_id":"public/js/schemes/muse.js","hash":"ae2a2502b77203e83f75a040c43e86a7ecb4873c","modified":1594530713781},{"_id":"public/js/utils.js","hash":"a1e70ac9d32697907d5d78f2533d627f4df8ebcb","modified":1594530713781},{"_id":"public/js/schemes/pisces.js","hash":"f068b46f8c305c7436c2767492a6bed42dcd764c","modified":1594530713781},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1594530713781},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1594530713781},{"_id":"public/css/main.css","hash":"ca8c4bf0d9a1ae46f9f936992b4b957904ca4800","modified":1594530713781},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1594530713781},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1594530713781},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1594530713781},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1594530713781},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1594530713781}],"Category":[{"name":"算法","_id":"ckcimf1s80003ocuo1s6qc0d6"},{"name":"编程语言","_id":"ckcimf1sl000hocuob45katnq"}],"Data":[],"Page":[{"title":"categories","date":"2020-07-12T04:11:39.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-07-12 12:11:39\ntype: \"categories\"\ncomments: false\n---\n","updated":"2020-07-12T04:13:08.675Z","path":"categories/index.html","layout":"page","_id":"ckcimf1s40001ocuoeo28686z","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-07-12T04:10:06.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-07-12 12:10:06\ntype: \"tags\"\ncomments: false\n---\n","updated":"2020-07-12T04:12:29.672Z","path":"tags/index.html","layout":"page","_id":"ckcimf1tc000rocuodo6s91ok","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"gym101177I 最长上升子序列","date":"2019-10-04T13:31:35.000Z","_content":"\n题目大意是给你一系列区间，区间两两互不相交，但可能会有重复出现，区间的值等于区间的长度，求最大的上升的区间值和。你可以类比最长上升子序列，不过最长上升子序列求的是序列的长度，而这里转化为序列的值。\n\n<!--more-->\n\n```cpp\ninput\n---\n5\n1 1\n10 11\n5 7\n3 4\n10 11\n---\noutput\n---\n6\n```\n\n比如这个样例6=((1-1+1)+(7-5+1)+(11-10+1))。\n\n这里提供`O(nlgn)`的做法：因为区间互不相交，所以只需要考虑区间的一端，就可以确定区间的顺序,可以考虑构造这样一个结构体，`l`存左端点，`v`存区间长度，`i`存原区间的位置。\n\n然后按左端点排序，由于区间会有重复，所以为了避免重复更新，需要先更新后面的，所以如果`l`相等，我们就把`i`大的放前面。排完序后：按照排的顺序更新，每次查询当前这个Node的`i`所能达到的最大序列值，然后在`i`位置更新为这个最大值加上自己的值。由于是按照区间的顺序更新，即前`i`个满足上升性质，所以可以保证前`i`个的最大值就是结点i所能达到的最大上升区间序列值。前`i`个的最大值用树状数组可以维护。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\n\nstruct Node {\n    ll l, v;\n    int i;\n    bool operator==(const Node& b) const\n    {\n        return l == b.l;\n    }\n    bool operator<(const Node& b) const\n    {\n        if (l == b.l)\n            return i > b.i;\n        return l < b.l;\n    }\n};\n\nNode a[100100];\nll Tr[100100];\nll INF = 2e9;\nint lowbit(int x) { return x & -x; }\n\nvoid update(int x, ll y, int n)\n{\n    for (int i = x; i <= n; i += lowbit(i)) {\n        Tr[i] = max(Tr[i], y);\n    }\n}\n\nll query(int x)\n{\n    ll ret = -INF;\n    for (int i = x; i; i -= lowbit(i)) {\n        ret = max(ret, Tr[i]);\n    }\n    return ret;\n}\n\n\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; i++) {\n        ll l, r;\n        scanf(\"%lld%lld\", &l, &r);\n        a[i].l = l;\n        a[i].i = i;\n        a[i].v = r - l + 1;\n    }\n    sort(a + 1, a + 1 + n);\n    ll ans = 0;\n    for (int i = 1; i <= n; i++) {\n        ll mx = query(a[i].i);\n        update(a[i].i, mx + a[i].v, n);\n        mx = query(a[i].i);\n        ans = max(ans, mx);\n    }\n    printf(\"%lld\\n\", ans);\n    return 0;\n}\n```\n","source":"_posts/1.md","raw":"---\ntitle: gym101177I 最长上升子序列\ndate: 2019-10-04 21:31:35\ncategories: 算法\n---\n\n题目大意是给你一系列区间，区间两两互不相交，但可能会有重复出现，区间的值等于区间的长度，求最大的上升的区间值和。你可以类比最长上升子序列，不过最长上升子序列求的是序列的长度，而这里转化为序列的值。\n\n<!--more-->\n\n```cpp\ninput\n---\n5\n1 1\n10 11\n5 7\n3 4\n10 11\n---\noutput\n---\n6\n```\n\n比如这个样例6=((1-1+1)+(7-5+1)+(11-10+1))。\n\n这里提供`O(nlgn)`的做法：因为区间互不相交，所以只需要考虑区间的一端，就可以确定区间的顺序,可以考虑构造这样一个结构体，`l`存左端点，`v`存区间长度，`i`存原区间的位置。\n\n然后按左端点排序，由于区间会有重复，所以为了避免重复更新，需要先更新后面的，所以如果`l`相等，我们就把`i`大的放前面。排完序后：按照排的顺序更新，每次查询当前这个Node的`i`所能达到的最大序列值，然后在`i`位置更新为这个最大值加上自己的值。由于是按照区间的顺序更新，即前`i`个满足上升性质，所以可以保证前`i`个的最大值就是结点i所能达到的最大上升区间序列值。前`i`个的最大值用树状数组可以维护。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\n\nstruct Node {\n    ll l, v;\n    int i;\n    bool operator==(const Node& b) const\n    {\n        return l == b.l;\n    }\n    bool operator<(const Node& b) const\n    {\n        if (l == b.l)\n            return i > b.i;\n        return l < b.l;\n    }\n};\n\nNode a[100100];\nll Tr[100100];\nll INF = 2e9;\nint lowbit(int x) { return x & -x; }\n\nvoid update(int x, ll y, int n)\n{\n    for (int i = x; i <= n; i += lowbit(i)) {\n        Tr[i] = max(Tr[i], y);\n    }\n}\n\nll query(int x)\n{\n    ll ret = -INF;\n    for (int i = x; i; i -= lowbit(i)) {\n        ret = max(ret, Tr[i]);\n    }\n    return ret;\n}\n\n\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; i++) {\n        ll l, r;\n        scanf(\"%lld%lld\", &l, &r);\n        a[i].l = l;\n        a[i].i = i;\n        a[i].v = r - l + 1;\n    }\n    sort(a + 1, a + 1 + n);\n    ll ans = 0;\n    for (int i = 1; i <= n; i++) {\n        ll mx = query(a[i].i);\n        update(a[i].i, mx + a[i].v, n);\n        mx = query(a[i].i);\n        ans = max(ans, mx);\n    }\n    printf(\"%lld\\n\", ans);\n    return 0;\n}\n```\n","slug":"1","published":1,"updated":"2020-07-12T05:10:19.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcimf1rv0000ocuo8aml04gj","content":"<p>题目大意是给你一系列区间，区间两两互不相交，但可能会有重复出现，区间的值等于区间的长度，求最大的上升的区间值和。你可以类比最长上升子序列，不过最长上升子序列求的是序列的长度，而这里转化为序列的值。</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input</span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">11</span></span><br><span class=\"line\">---</span><br><span class=\"line\">output</span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<p>比如这个样例6=((1-1+1)+(7-5+1)+(11-10+1))。</p>\n<p>这里提供<code>O(nlgn)</code>的做法：因为区间互不相交，所以只需要考虑区间的一端，就可以确定区间的顺序,可以考虑构造这样一个结构体，<code>l</code>存左端点，<code>v</code>存区间长度，<code>i</code>存原区间的位置。</p>\n<p>然后按左端点排序，由于区间会有重复，所以为了避免重复更新，需要先更新后面的，所以如果<code>l</code>相等，我们就把<code>i</code>大的放前面。排完序后：按照排的顺序更新，每次查询当前这个Node的<code>i</code>所能达到的最大序列值，然后在<code>i</code>位置更新为这个最大值加上自己的值。由于是按照区间的顺序更新，即前<code>i</code>个满足上升性质，所以可以保证前<code>i</code>个的最大值就是结点i所能达到的最大上升区间序列值。前<code>i</code>个的最大值用树状数组可以维护。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> &#123;</span></span><br><span class=\"line\">    ll l, v;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> Node&amp; b) <span class=\"keyword\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l == b.l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> Node&amp; b) <span class=\"keyword\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l == b.l)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i &gt; b.i;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l &lt; b.l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Node a[<span class=\"number\">100100</span>];</span><br><span class=\"line\">ll Tr[<span class=\"number\">100100</span>];</span><br><span class=\"line\">ll INF = <span class=\"number\">2e9</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123; <span class=\"keyword\">return</span> x &amp; -x; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> x, ll y, <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x; i &lt;= n; i += lowbit(i)) &#123;</span><br><span class=\"line\">        Tr[i] = max(Tr[i], y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll ret = -INF;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x; i; i -= lowbit(i)) &#123;</span><br><span class=\"line\">        ret = max(ret, Tr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        ll l, r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld%lld\"</span>, &amp;l, &amp;r);</span><br><span class=\"line\">        a[i].l = l;</span><br><span class=\"line\">        a[i].i = i;</span><br><span class=\"line\">        a[i].v = r - l + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sort(a + <span class=\"number\">1</span>, a + <span class=\"number\">1</span> + n);</span><br><span class=\"line\">    ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        ll mx = query(a[i].i);</span><br><span class=\"line\">        update(a[i].i, mx + a[i].v, n);</span><br><span class=\"line\">        mx = query(a[i].i);</span><br><span class=\"line\">        ans = max(ans, mx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>题目大意是给你一系列区间，区间两两互不相交，但可能会有重复出现，区间的值等于区间的长度，求最大的上升的区间值和。你可以类比最长上升子序列，不过最长上升子序列求的是序列的长度，而这里转化为序列的值。</p>","more":"<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input</span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">11</span></span><br><span class=\"line\">---</span><br><span class=\"line\">output</span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<p>比如这个样例6=((1-1+1)+(7-5+1)+(11-10+1))。</p>\n<p>这里提供<code>O(nlgn)</code>的做法：因为区间互不相交，所以只需要考虑区间的一端，就可以确定区间的顺序,可以考虑构造这样一个结构体，<code>l</code>存左端点，<code>v</code>存区间长度，<code>i</code>存原区间的位置。</p>\n<p>然后按左端点排序，由于区间会有重复，所以为了避免重复更新，需要先更新后面的，所以如果<code>l</code>相等，我们就把<code>i</code>大的放前面。排完序后：按照排的顺序更新，每次查询当前这个Node的<code>i</code>所能达到的最大序列值，然后在<code>i</code>位置更新为这个最大值加上自己的值。由于是按照区间的顺序更新，即前<code>i</code>个满足上升性质，所以可以保证前<code>i</code>个的最大值就是结点i所能达到的最大上升区间序列值。前<code>i</code>个的最大值用树状数组可以维护。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> &#123;</span></span><br><span class=\"line\">    ll l, v;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> Node&amp; b) <span class=\"keyword\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l == b.l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> Node&amp; b) <span class=\"keyword\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l == b.l)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i &gt; b.i;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l &lt; b.l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Node a[<span class=\"number\">100100</span>];</span><br><span class=\"line\">ll Tr[<span class=\"number\">100100</span>];</span><br><span class=\"line\">ll INF = <span class=\"number\">2e9</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123; <span class=\"keyword\">return</span> x &amp; -x; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> x, ll y, <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x; i &lt;= n; i += lowbit(i)) &#123;</span><br><span class=\"line\">        Tr[i] = max(Tr[i], y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll ret = -INF;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x; i; i -= lowbit(i)) &#123;</span><br><span class=\"line\">        ret = max(ret, Tr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        ll l, r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld%lld\"</span>, &amp;l, &amp;r);</span><br><span class=\"line\">        a[i].l = l;</span><br><span class=\"line\">        a[i].i = i;</span><br><span class=\"line\">        a[i].v = r - l + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sort(a + <span class=\"number\">1</span>, a + <span class=\"number\">1</span> + n);</span><br><span class=\"line\">    ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        ll mx = query(a[i].i);</span><br><span class=\"line\">        update(a[i].i, mx + a[i].v, n);</span><br><span class=\"line\">        mx = query(a[i].i);</span><br><span class=\"line\">        ans = max(ans, mx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"prim算法","date":"2019-05-04T05:49:31.000Z","_content":"\n### (1) 普里姆算法的基本思想\n\n取图中任意一个顶点 v 作为生成树的根，之后往生成树上添加新的顶点 w。在添加的顶点 w 和已经在生成树上的顶点v 之间必定存在一条边，并且该边的权值在所有连通顶点 v 和 w 之间的边中取值最小。之后继续往生成树上添加顶点，直至生成树上含有 n 个顶点为止。\n<!--more-->\n\n在生成树的构造过程中，图中 n 个顶点分属两个集合：已落在生成树上的顶点集 X 和尚未落在生成树上的顶点集V-X ，则应在所有连通X中顶点和V-X中顶点的边中选取权值最小的边。\n\n### (二) 代码演示\n\n```cpp\n#include<cstring>\n#include <algorithm>\n#include <stdio.h>\n#include <vector>\nusing namespace std;\n\nconst int INF = INT_MAX;\n\nconst int MAX_V = 105;//最大顶点数，可以自己改\n\nint cost[MAX_V][MAX_V]; //表示u,v之间的权值\n\nint mincost[MAX_V]; //表示从集合x出发到每个顶点最小权值\n\nbool used[MAX_V]; //表示顶点是否在集合x中\n\nint V; //顶点数\n\nint prim()\n{\n    for (int i = 0; i < V; i++)\n    {\n        mincost[i] = INF;\n        used[i] = false;\n    }\n    mincost[0] = 0;\n    int res = 0;\n    while (true)\n    {\n        int v = -1;\n        //从不属于集合x的顶点中选取从x到权值最小的顶点\n        for (int u = 0; u < V; u++)\n        {\n            if (!used[u] && (v == -1 || mincost[u] < mincost[v]))\n                v = u;\n        }\n        if (v == -1)\n            break;\n        used[v] = true;//把顶点v加入集合x\n        res += mincost[v];//把边的长度加到结果\n        for (int u = 0; u < V; u++)\n        {\n            mincost[u] = min(mincost[u], cost[u][v]);\n        }\n    }\n    return res;\n}\n\n```\n\n","source":"_posts/2.md","raw":"---\ntitle: prim算法\ndate: 2019-05-04 13:49:31\ncategories: 算法\n---\n\n### (1) 普里姆算法的基本思想\n\n取图中任意一个顶点 v 作为生成树的根，之后往生成树上添加新的顶点 w。在添加的顶点 w 和已经在生成树上的顶点v 之间必定存在一条边，并且该边的权值在所有连通顶点 v 和 w 之间的边中取值最小。之后继续往生成树上添加顶点，直至生成树上含有 n 个顶点为止。\n<!--more-->\n\n在生成树的构造过程中，图中 n 个顶点分属两个集合：已落在生成树上的顶点集 X 和尚未落在生成树上的顶点集V-X ，则应在所有连通X中顶点和V-X中顶点的边中选取权值最小的边。\n\n### (二) 代码演示\n\n```cpp\n#include<cstring>\n#include <algorithm>\n#include <stdio.h>\n#include <vector>\nusing namespace std;\n\nconst int INF = INT_MAX;\n\nconst int MAX_V = 105;//最大顶点数，可以自己改\n\nint cost[MAX_V][MAX_V]; //表示u,v之间的权值\n\nint mincost[MAX_V]; //表示从集合x出发到每个顶点最小权值\n\nbool used[MAX_V]; //表示顶点是否在集合x中\n\nint V; //顶点数\n\nint prim()\n{\n    for (int i = 0; i < V; i++)\n    {\n        mincost[i] = INF;\n        used[i] = false;\n    }\n    mincost[0] = 0;\n    int res = 0;\n    while (true)\n    {\n        int v = -1;\n        //从不属于集合x的顶点中选取从x到权值最小的顶点\n        for (int u = 0; u < V; u++)\n        {\n            if (!used[u] && (v == -1 || mincost[u] < mincost[v]))\n                v = u;\n        }\n        if (v == -1)\n            break;\n        used[v] = true;//把顶点v加入集合x\n        res += mincost[v];//把边的长度加到结果\n        for (int u = 0; u < V; u++)\n        {\n            mincost[u] = min(mincost[u], cost[u][v]);\n        }\n    }\n    return res;\n}\n\n```\n\n","slug":"2","published":1,"updated":"2020-07-12T05:10:30.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcimf1s60002ocuog7gn9m15","content":"<h3 id=\"1-普里姆算法的基本思想\"><a href=\"#1-普里姆算法的基本思想\" class=\"headerlink\" title=\"(1) 普里姆算法的基本思想\"></a>(1) 普里姆算法的基本思想</h3><p>取图中任意一个顶点 v 作为生成树的根，之后往生成树上添加新的顶点 w。在添加的顶点 w 和已经在生成树上的顶点v 之间必定存在一条边，并且该边的权值在所有连通顶点 v 和 w 之间的边中取值最小。之后继续往生成树上添加顶点，直至生成树上含有 n 个顶点为止。</p>\n<a id=\"more\"></a>\n\n<p>在生成树的构造过程中，图中 n 个顶点分属两个集合：已落在生成树上的顶点集 X 和尚未落在生成树上的顶点集V-X ，则应在所有连通X中顶点和V-X中顶点的边中选取权值最小的边。</p>\n<h3 id=\"二-代码演示\"><a href=\"#二-代码演示\" class=\"headerlink\" title=\"(二) 代码演示\"></a>(二) 代码演示</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = INT_MAX;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_V = <span class=\"number\">105</span>;<span class=\"comment\">//最大顶点数，可以自己改</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> cost[MAX_V][MAX_V]; <span class=\"comment\">//表示u,v之间的权值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> mincost[MAX_V]; <span class=\"comment\">//表示从集合x出发到每个顶点最小权值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> used[MAX_V]; <span class=\"comment\">//表示顶点是否在集合x中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> V; <span class=\"comment\">//顶点数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">prim</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; V; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mincost[i] = INF;</span><br><span class=\"line\">        used[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mincost[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//从不属于集合x的顶点中选取从x到权值最小的顶点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> u = <span class=\"number\">0</span>; u &lt; V; u++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!used[u] &amp;&amp; (v == <span class=\"number\">-1</span> || mincost[u] &lt; mincost[v]))</span><br><span class=\"line\">                v = u;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v == <span class=\"number\">-1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        used[v] = <span class=\"literal\">true</span>;<span class=\"comment\">//把顶点v加入集合x</span></span><br><span class=\"line\">        res += mincost[v];<span class=\"comment\">//把边的长度加到结果</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> u = <span class=\"number\">0</span>; u &lt; V; u++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            mincost[u] = min(mincost[u], cost[u][v]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h3 id=\"1-普里姆算法的基本思想\"><a href=\"#1-普里姆算法的基本思想\" class=\"headerlink\" title=\"(1) 普里姆算法的基本思想\"></a>(1) 普里姆算法的基本思想</h3><p>取图中任意一个顶点 v 作为生成树的根，之后往生成树上添加新的顶点 w。在添加的顶点 w 和已经在生成树上的顶点v 之间必定存在一条边，并且该边的权值在所有连通顶点 v 和 w 之间的边中取值最小。之后继续往生成树上添加顶点，直至生成树上含有 n 个顶点为止。</p>","more":"<p>在生成树的构造过程中，图中 n 个顶点分属两个集合：已落在生成树上的顶点集 X 和尚未落在生成树上的顶点集V-X ，则应在所有连通X中顶点和V-X中顶点的边中选取权值最小的边。</p>\n<h3 id=\"二-代码演示\"><a href=\"#二-代码演示\" class=\"headerlink\" title=\"(二) 代码演示\"></a>(二) 代码演示</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = INT_MAX;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_V = <span class=\"number\">105</span>;<span class=\"comment\">//最大顶点数，可以自己改</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> cost[MAX_V][MAX_V]; <span class=\"comment\">//表示u,v之间的权值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> mincost[MAX_V]; <span class=\"comment\">//表示从集合x出发到每个顶点最小权值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> used[MAX_V]; <span class=\"comment\">//表示顶点是否在集合x中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> V; <span class=\"comment\">//顶点数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">prim</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; V; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mincost[i] = INF;</span><br><span class=\"line\">        used[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mincost[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//从不属于集合x的顶点中选取从x到权值最小的顶点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> u = <span class=\"number\">0</span>; u &lt; V; u++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!used[u] &amp;&amp; (v == <span class=\"number\">-1</span> || mincost[u] &lt; mincost[v]))</span><br><span class=\"line\">                v = u;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v == <span class=\"number\">-1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        used[v] = <span class=\"literal\">true</span>;<span class=\"comment\">//把顶点v加入集合x</span></span><br><span class=\"line\">        res += mincost[v];<span class=\"comment\">//把边的长度加到结果</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> u = <span class=\"number\">0</span>; u &lt; V; u++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            mincost[u] = min(mincost[u], cost[u][v]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"优先队列的应用 C++实现","date":"2018-10-30T14:53:04.000Z","_content":"\n优先队列可以用堆来实现, 堆底层可以用数组表示，\n通过索引关系，可以表示成一颗二叉完全树\n<!--more-->\n\nC++的STL提供了相应的容器适配器\n包含在`queue`头文件中\n\n\n下面通过一道题来看如何使用它\n#### [给定一个字符串，请将字符串里的字符按照出现的频率降序排列。](https://leetcode-cn.com/problems/sort-characters-by-frequency/description/)\n\n```cpp\nstring frequencySort(string s) {\n}\n```\n\n首先，统计字符出现的频率，通过map容器可以很简单的统计出来\n\n```cpp\nmap<char, int> mp;\n\nfor (auto e : s)\n{\n    ++mp[e];\n}\n```\n\n然后我们需要构建一个优先队列，而且要指定优先队列的排序方式\n因此我们定义了一个自己的结构体, 并定义了`<`操作符(降序定义小于号，升序大于号)，\n\n```cpp\nstruct Node\n{\n    Node(const pair<char, int> &val) : p(val) {}\n    pair<char, int> p;\n};\n\nbool operator<(const Node &a, const Node &b)\n{\n    return a.p.second < b.p.second;\n}\n```\n\n然后把键值对放入优先队列中\n\n```cpp\npriority_queue<Node, vector<Node>, less<Node>> pq;\nfor (auto e : mp)\n{\n    pq.push(make_pair(e.first, e.second));\n}\n```\n\n要用的时候，依次取出来就是了，每次取出的都是里面最大(或最小)的\n\n```cpp\nstring res;\nwhile (!pq.empty())\n{\n    for (int i = 0; i < pq.top().p.second; ++i)\n        res.push_back(pq.top().p.first);\n    pq.pop();\n}\n```\n\n还有好几个类似的题，都可以用这种方式解决\n\n比如 :\n+ [leetcode-692](https://leetcode-cn.com/problems/top-k-frequent-words)\n+ [leetcode-378](https://leetcode-cn.com/problems/kth-smallest-element-in-a-sorted-matrix)\n+ [leetcode-373](https://leetcode-cn.com/problems/find-k-pairs-with-smallest-sums)\n+ [leetcode-347](https://leetcode-cn.com/problems/top-k-frequent-elements)\n\n\nPython中也有相应的库提供类似的功能，`《Python CookBook》`中就有提到\n\n```python\n>>> import heapq\n>>> nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]\n>>> print(heapq.nlargest(3, nums)) # Prints [42, 37, 23]\n>>> print(heapq.nsmallest(3, nums)) # Prints [-4, 1, 2]\n```\n\n+ 这些方法是基于堆数据结构实现的，对于查找的元素个数较少的时候比较合适\n\n+ 如果仅仅想查找最大或者最小（N=1）的元素的话，用min()或者max()比较合适\n\n+ 如果 N 的大小和集合大小接近的时候，通常先排序这个集合然后再使用切片操作会更快点\n\n`>>> sorted(items)[:N]`\n\n#### 下面是堆的实现, 还是建议掌握的\n\n```cpp\n#include <vector>\nusing namespace std;\n\ntemplate <class T>\nclass Heap\n{\n  public:\n    Heap(size_t maxElems)\n    {\n        h = new HeapStruct;\n        h->Elems = new T[maxElems + 1];\n        h->Capacity = maxElems;\n        h->size = 0;\n    }\n    ~Heap()\n    {\n        destroy();\n    }\n    void insert(T x)\n    {\n        size_t i;\n        if (isFull())\n        {\n            return;\n        }\n        for (i = ++h->size; i / 2 > 0 && h->Elems[i / 2] > x; i /= 2)\n        {\n            h->Elems[i] = h->Elems[i / 2];\n        }\n        h->Elems[i] = x;\n    }\n    T deleteMin()\n    {\n        size_t i, child;\n        T minElems, lastElems;\n        if (isEmpty())\n            return h->Elems[0];\n        minElems = h->Elems[1];\n        lastElems = h->Elems[h->size--];\n        for (i = 1; i * 2 <= h->size; i = child)\n        {\n            child = i * 2;\n            if (child != h->size && h->Elems[child + 1] < h->Elems[child])\n                ++child;\n            if (lastElems > h->Elems[child])\n                h->Elems[i] = h->Elems[child];\n            else\n                break;\n        }\n        h->Elems[i] = lastElems;\n        return minElems;\n    }\n    bool isFull()\n    {\n        return h->size == h->Capacity;\n    }\n    bool isEmpty()\n    {\n        return h->size == 0;\n    }\n    T findMin()\n    {\n        return h->Elems[1];\n    }\n\n  private:\n    void destroy()\n    {\n        delete h->Elems;\n        delete h;\n    }\n    void makeEmpty() {}\n\n    struct HeapStruct\n    {\n        size_t Capacity;\n        size_t size;\n        T *Elems;\n    };\n    HeapStruct* h;\n};\n```","source":"_posts/3.md","raw":"---\ntitle: 优先队列的应用 C++实现\ndate: 2018-10-30 22:53:04\ntags: C++\ncategories: 算法\n---\n\n优先队列可以用堆来实现, 堆底层可以用数组表示，\n通过索引关系，可以表示成一颗二叉完全树\n<!--more-->\n\nC++的STL提供了相应的容器适配器\n包含在`queue`头文件中\n\n\n下面通过一道题来看如何使用它\n#### [给定一个字符串，请将字符串里的字符按照出现的频率降序排列。](https://leetcode-cn.com/problems/sort-characters-by-frequency/description/)\n\n```cpp\nstring frequencySort(string s) {\n}\n```\n\n首先，统计字符出现的频率，通过map容器可以很简单的统计出来\n\n```cpp\nmap<char, int> mp;\n\nfor (auto e : s)\n{\n    ++mp[e];\n}\n```\n\n然后我们需要构建一个优先队列，而且要指定优先队列的排序方式\n因此我们定义了一个自己的结构体, 并定义了`<`操作符(降序定义小于号，升序大于号)，\n\n```cpp\nstruct Node\n{\n    Node(const pair<char, int> &val) : p(val) {}\n    pair<char, int> p;\n};\n\nbool operator<(const Node &a, const Node &b)\n{\n    return a.p.second < b.p.second;\n}\n```\n\n然后把键值对放入优先队列中\n\n```cpp\npriority_queue<Node, vector<Node>, less<Node>> pq;\nfor (auto e : mp)\n{\n    pq.push(make_pair(e.first, e.second));\n}\n```\n\n要用的时候，依次取出来就是了，每次取出的都是里面最大(或最小)的\n\n```cpp\nstring res;\nwhile (!pq.empty())\n{\n    for (int i = 0; i < pq.top().p.second; ++i)\n        res.push_back(pq.top().p.first);\n    pq.pop();\n}\n```\n\n还有好几个类似的题，都可以用这种方式解决\n\n比如 :\n+ [leetcode-692](https://leetcode-cn.com/problems/top-k-frequent-words)\n+ [leetcode-378](https://leetcode-cn.com/problems/kth-smallest-element-in-a-sorted-matrix)\n+ [leetcode-373](https://leetcode-cn.com/problems/find-k-pairs-with-smallest-sums)\n+ [leetcode-347](https://leetcode-cn.com/problems/top-k-frequent-elements)\n\n\nPython中也有相应的库提供类似的功能，`《Python CookBook》`中就有提到\n\n```python\n>>> import heapq\n>>> nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]\n>>> print(heapq.nlargest(3, nums)) # Prints [42, 37, 23]\n>>> print(heapq.nsmallest(3, nums)) # Prints [-4, 1, 2]\n```\n\n+ 这些方法是基于堆数据结构实现的，对于查找的元素个数较少的时候比较合适\n\n+ 如果仅仅想查找最大或者最小（N=1）的元素的话，用min()或者max()比较合适\n\n+ 如果 N 的大小和集合大小接近的时候，通常先排序这个集合然后再使用切片操作会更快点\n\n`>>> sorted(items)[:N]`\n\n#### 下面是堆的实现, 还是建议掌握的\n\n```cpp\n#include <vector>\nusing namespace std;\n\ntemplate <class T>\nclass Heap\n{\n  public:\n    Heap(size_t maxElems)\n    {\n        h = new HeapStruct;\n        h->Elems = new T[maxElems + 1];\n        h->Capacity = maxElems;\n        h->size = 0;\n    }\n    ~Heap()\n    {\n        destroy();\n    }\n    void insert(T x)\n    {\n        size_t i;\n        if (isFull())\n        {\n            return;\n        }\n        for (i = ++h->size; i / 2 > 0 && h->Elems[i / 2] > x; i /= 2)\n        {\n            h->Elems[i] = h->Elems[i / 2];\n        }\n        h->Elems[i] = x;\n    }\n    T deleteMin()\n    {\n        size_t i, child;\n        T minElems, lastElems;\n        if (isEmpty())\n            return h->Elems[0];\n        minElems = h->Elems[1];\n        lastElems = h->Elems[h->size--];\n        for (i = 1; i * 2 <= h->size; i = child)\n        {\n            child = i * 2;\n            if (child != h->size && h->Elems[child + 1] < h->Elems[child])\n                ++child;\n            if (lastElems > h->Elems[child])\n                h->Elems[i] = h->Elems[child];\n            else\n                break;\n        }\n        h->Elems[i] = lastElems;\n        return minElems;\n    }\n    bool isFull()\n    {\n        return h->size == h->Capacity;\n    }\n    bool isEmpty()\n    {\n        return h->size == 0;\n    }\n    T findMin()\n    {\n        return h->Elems[1];\n    }\n\n  private:\n    void destroy()\n    {\n        delete h->Elems;\n        delete h;\n    }\n    void makeEmpty() {}\n\n    struct HeapStruct\n    {\n        size_t Capacity;\n        size_t size;\n        T *Elems;\n    };\n    HeapStruct* h;\n};\n```","slug":"3","published":1,"updated":"2020-07-12T05:10:39.572Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcimf1sa0004ocuohjh9hkz2","content":"<p>优先队列可以用堆来实现, 堆底层可以用数组表示，<br>通过索引关系，可以表示成一颗二叉完全树</p>\n<a id=\"more\"></a>\n\n<p>C++的STL提供了相应的容器适配器<br>包含在<code>queue</code>头文件中</p>\n<p>下面通过一道题来看如何使用它</p>\n<h4 id=\"给定一个字符串，请将字符串里的字符按照出现的频率降序排列。\"><a href=\"#给定一个字符串，请将字符串里的字符按照出现的频率降序排列。\" class=\"headerlink\" title=\"给定一个字符串，请将字符串里的字符按照出现的频率降序排列。\"></a><a href=\"https://leetcode-cn.com/problems/sort-characters-by-frequency/description/\" target=\"_blank\" rel=\"noopener\">给定一个字符串，请将字符串里的字符按照出现的频率降序排列。</a></h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">frequencySort</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先，统计字符出现的频率，通过map容器可以很简单的统计出来</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>, <span class=\"keyword\">int</span>&gt; mp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> e : s)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ++mp[e];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们需要构建一个优先队列，而且要指定优先队列的排序方式<br>因此我们定义了一个自己的结构体, 并定义了<code>&lt;</code>操作符(降序定义小于号，升序大于号)，</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    Node(<span class=\"keyword\">const</span> pair&lt;<span class=\"keyword\">char</span>, <span class=\"keyword\">int</span>&gt; &amp;val) : p(val) &#123;&#125;</span><br><span class=\"line\">    pair&lt;<span class=\"keyword\">char</span>, <span class=\"keyword\">int</span>&gt; p;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> Node &amp;a, <span class=\"keyword\">const</span> Node &amp;b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.p.second &lt; b.p.second;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后把键值对放入优先队列中</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">priority_queue&lt;Node, <span class=\"built_in\">vector</span>&lt;Node&gt;, less&lt;Node&gt;&gt; pq;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> e : mp)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    pq.push(make_pair(e.first, e.second));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>要用的时候，依次取出来就是了，每次取出的都是里面最大(或最小)的</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> res;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (!pq.empty())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pq.top().p.second; ++i)</span><br><span class=\"line\">        res.push_back(pq.top().p.first);</span><br><span class=\"line\">    pq.pop();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还有好几个类似的题，都可以用这种方式解决</p>\n<p>比如 :</p>\n<ul>\n<li><a href=\"https://leetcode-cn.com/problems/top-k-frequent-words\" target=\"_blank\" rel=\"noopener\">leetcode-692</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/kth-smallest-element-in-a-sorted-matrix\" target=\"_blank\" rel=\"noopener\">leetcode-378</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/find-k-pairs-with-smallest-sums\" target=\"_blank\" rel=\"noopener\">leetcode-373</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/top-k-frequent-elements\" target=\"_blank\" rel=\"noopener\">leetcode-347</a></li>\n</ul>\n<p>Python中也有相应的库提供类似的功能，<code>《Python CookBook》</code>中就有提到</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> heapq</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nums = [<span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>, <span class=\"number\">23</span>, <span class=\"number\">7</span>, <span class=\"number\">-4</span>, <span class=\"number\">18</span>, <span class=\"number\">23</span>, <span class=\"number\">42</span>, <span class=\"number\">37</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(heapq.nlargest(<span class=\"number\">3</span>, nums)) <span class=\"comment\"># Prints [42, 37, 23]</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(heapq.nsmallest(<span class=\"number\">3</span>, nums)) <span class=\"comment\"># Prints [-4, 1, 2]</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>这些方法是基于堆数据结构实现的，对于查找的元素个数较少的时候比较合适</p>\n</li>\n<li><p>如果仅仅想查找最大或者最小（N=1）的元素的话，用min()或者max()比较合适</p>\n</li>\n<li><p>如果 N 的大小和集合大小接近的时候，通常先排序这个集合然后再使用切片操作会更快点</p>\n</li>\n</ul>\n<p><code>&gt;&gt;&gt; sorted(items)[:N]</code></p>\n<h4 id=\"下面是堆的实现-还是建议掌握的\"><a href=\"#下面是堆的实现-还是建议掌握的\" class=\"headerlink\" title=\"下面是堆的实现, 还是建议掌握的\"></a>下面是堆的实现, 还是建议掌握的</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">Heap</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Heap(<span class=\"keyword\">size_t</span> maxElems)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        h = <span class=\"keyword\">new</span> HeapStruct;</span><br><span class=\"line\">        h-&gt;Elems = <span class=\"keyword\">new</span> T[maxElems + <span class=\"number\">1</span>];</span><br><span class=\"line\">        h-&gt;Capacity = maxElems;</span><br><span class=\"line\">        h-&gt;size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~Heap()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        destroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(T x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">size_t</span> i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isFull())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = ++h-&gt;size; i / <span class=\"number\">2</span> &gt; <span class=\"number\">0</span> &amp;&amp; h-&gt;Elems[i / <span class=\"number\">2</span>] &gt; x; i /= <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            h-&gt;Elems[i] = h-&gt;Elems[i / <span class=\"number\">2</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        h-&gt;Elems[i] = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">deleteMin</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">size_t</span> i, child;</span><br><span class=\"line\">        T minElems, lastElems;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> h-&gt;Elems[<span class=\"number\">0</span>];</span><br><span class=\"line\">        minElems = h-&gt;Elems[<span class=\"number\">1</span>];</span><br><span class=\"line\">        lastElems = h-&gt;Elems[h-&gt;size--];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i * <span class=\"number\">2</span> &lt;= h-&gt;size; i = child)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            child = i * <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (child != h-&gt;size &amp;&amp; h-&gt;Elems[child + <span class=\"number\">1</span>] &lt; h-&gt;Elems[child])</span><br><span class=\"line\">                ++child;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lastElems &gt; h-&gt;Elems[child])</span><br><span class=\"line\">                h-&gt;Elems[i] = h-&gt;Elems[child];</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        h-&gt;Elems[i] = lastElems;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> minElems;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isFull</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> h-&gt;size == h-&gt;Capacity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> h-&gt;size == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">findMin</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> h-&gt;Elems[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> h-&gt;Elems;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> h;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">makeEmpty</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">HeapStruct</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">size_t</span> Capacity;</span><br><span class=\"line\">        <span class=\"keyword\">size_t</span> size;</span><br><span class=\"line\">        T *Elems;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    HeapStruct* h;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>优先队列可以用堆来实现, 堆底层可以用数组表示，<br>通过索引关系，可以表示成一颗二叉完全树</p>","more":"<p>C++的STL提供了相应的容器适配器<br>包含在<code>queue</code>头文件中</p>\n<p>下面通过一道题来看如何使用它</p>\n<h4 id=\"给定一个字符串，请将字符串里的字符按照出现的频率降序排列。\"><a href=\"#给定一个字符串，请将字符串里的字符按照出现的频率降序排列。\" class=\"headerlink\" title=\"给定一个字符串，请将字符串里的字符按照出现的频率降序排列。\"></a><a href=\"https://leetcode-cn.com/problems/sort-characters-by-frequency/description/\" target=\"_blank\" rel=\"noopener\">给定一个字符串，请将字符串里的字符按照出现的频率降序排列。</a></h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">frequencySort</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先，统计字符出现的频率，通过map容器可以很简单的统计出来</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>, <span class=\"keyword\">int</span>&gt; mp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> e : s)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ++mp[e];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们需要构建一个优先队列，而且要指定优先队列的排序方式<br>因此我们定义了一个自己的结构体, 并定义了<code>&lt;</code>操作符(降序定义小于号，升序大于号)，</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    Node(<span class=\"keyword\">const</span> pair&lt;<span class=\"keyword\">char</span>, <span class=\"keyword\">int</span>&gt; &amp;val) : p(val) &#123;&#125;</span><br><span class=\"line\">    pair&lt;<span class=\"keyword\">char</span>, <span class=\"keyword\">int</span>&gt; p;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> Node &amp;a, <span class=\"keyword\">const</span> Node &amp;b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.p.second &lt; b.p.second;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后把键值对放入优先队列中</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">priority_queue&lt;Node, <span class=\"built_in\">vector</span>&lt;Node&gt;, less&lt;Node&gt;&gt; pq;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> e : mp)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    pq.push(make_pair(e.first, e.second));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>要用的时候，依次取出来就是了，每次取出的都是里面最大(或最小)的</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> res;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (!pq.empty())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pq.top().p.second; ++i)</span><br><span class=\"line\">        res.push_back(pq.top().p.first);</span><br><span class=\"line\">    pq.pop();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还有好几个类似的题，都可以用这种方式解决</p>\n<p>比如 :</p>\n<ul>\n<li><a href=\"https://leetcode-cn.com/problems/top-k-frequent-words\" target=\"_blank\" rel=\"noopener\">leetcode-692</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/kth-smallest-element-in-a-sorted-matrix\" target=\"_blank\" rel=\"noopener\">leetcode-378</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/find-k-pairs-with-smallest-sums\" target=\"_blank\" rel=\"noopener\">leetcode-373</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/top-k-frequent-elements\" target=\"_blank\" rel=\"noopener\">leetcode-347</a></li>\n</ul>\n<p>Python中也有相应的库提供类似的功能，<code>《Python CookBook》</code>中就有提到</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> heapq</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nums = [<span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>, <span class=\"number\">23</span>, <span class=\"number\">7</span>, <span class=\"number\">-4</span>, <span class=\"number\">18</span>, <span class=\"number\">23</span>, <span class=\"number\">42</span>, <span class=\"number\">37</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(heapq.nlargest(<span class=\"number\">3</span>, nums)) <span class=\"comment\"># Prints [42, 37, 23]</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(heapq.nsmallest(<span class=\"number\">3</span>, nums)) <span class=\"comment\"># Prints [-4, 1, 2]</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>这些方法是基于堆数据结构实现的，对于查找的元素个数较少的时候比较合适</p>\n</li>\n<li><p>如果仅仅想查找最大或者最小（N=1）的元素的话，用min()或者max()比较合适</p>\n</li>\n<li><p>如果 N 的大小和集合大小接近的时候，通常先排序这个集合然后再使用切片操作会更快点</p>\n</li>\n</ul>\n<p><code>&gt;&gt;&gt; sorted(items)[:N]</code></p>\n<h4 id=\"下面是堆的实现-还是建议掌握的\"><a href=\"#下面是堆的实现-还是建议掌握的\" class=\"headerlink\" title=\"下面是堆的实现, 还是建议掌握的\"></a>下面是堆的实现, 还是建议掌握的</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">Heap</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Heap(<span class=\"keyword\">size_t</span> maxElems)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        h = <span class=\"keyword\">new</span> HeapStruct;</span><br><span class=\"line\">        h-&gt;Elems = <span class=\"keyword\">new</span> T[maxElems + <span class=\"number\">1</span>];</span><br><span class=\"line\">        h-&gt;Capacity = maxElems;</span><br><span class=\"line\">        h-&gt;size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~Heap()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        destroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(T x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">size_t</span> i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isFull())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = ++h-&gt;size; i / <span class=\"number\">2</span> &gt; <span class=\"number\">0</span> &amp;&amp; h-&gt;Elems[i / <span class=\"number\">2</span>] &gt; x; i /= <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            h-&gt;Elems[i] = h-&gt;Elems[i / <span class=\"number\">2</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        h-&gt;Elems[i] = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">deleteMin</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">size_t</span> i, child;</span><br><span class=\"line\">        T minElems, lastElems;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> h-&gt;Elems[<span class=\"number\">0</span>];</span><br><span class=\"line\">        minElems = h-&gt;Elems[<span class=\"number\">1</span>];</span><br><span class=\"line\">        lastElems = h-&gt;Elems[h-&gt;size--];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i * <span class=\"number\">2</span> &lt;= h-&gt;size; i = child)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            child = i * <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (child != h-&gt;size &amp;&amp; h-&gt;Elems[child + <span class=\"number\">1</span>] &lt; h-&gt;Elems[child])</span><br><span class=\"line\">                ++child;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lastElems &gt; h-&gt;Elems[child])</span><br><span class=\"line\">                h-&gt;Elems[i] = h-&gt;Elems[child];</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        h-&gt;Elems[i] = lastElems;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> minElems;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isFull</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> h-&gt;size == h-&gt;Capacity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> h-&gt;size == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">findMin</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> h-&gt;Elems[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> h-&gt;Elems;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> h;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">makeEmpty</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">HeapStruct</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">size_t</span> Capacity;</span><br><span class=\"line\">        <span class=\"keyword\">size_t</span> size;</span><br><span class=\"line\">        T *Elems;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    HeapStruct* h;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"右值引用与移动语义","date":"2019-02-24T07:06:34.000Z","_content":"\n什么是右值？在C++中，一种被广泛认可的说法是，不能取地址，没有名字的就是右值，通常位于等号右边，相反，位于等号左边的，能取地址，有名字的被称为左值。\n<!--more-->\n\n```\na = b + c\n```\n\n例如上式中，a就是个左值，b+c则是右值。\n\nC++11又将右值分为纯右值和将亡值。纯右值包括：不跟对象关联的字面值，一些运算表达式(如1+3)。将亡值是跟右值引用相关的表达式，比如右值引用`T&&`函数的返回值，`std::move`的返回值。\n\n右值引用就是对一个右值进行引用的类型。右值引用主要是为了移动语义，而移动语义则需要右值是可以被更改的，这也是为什么不用常量引用。只有绑定右值的引用类型，就能够延长右值的生命期。\n\n`std::move`的功能是将左值强制转换为右值引用。\n\n接下来看个例子：\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nclass HugeMem\n{\n  public:\n    HugeMem(int size) : sz(size > 0 ? size : 1)\n    {\n        c = new int[sz];\n    }\n    ~HugeMem() { delete[] c; }\n    HugeMem(HugeMem &&h) : sz(h.sz), c(h.c)\n    {\n        h.c = nullptr;\n    }\n    int sz;\n    int *c;\n};\n\nclass Moveable\n{\n  public:\n    Moveable() : i(new int(3)), h(1024) {}\n    ~Moveable() { delete i; }\n    Moveable(Moveable &&m) : i(m.i), h(move(m.h))\n    {\n        m.i = nullptr;\n    }\n    int *i;\n    HugeMem h;\n};\n\n```\n\n上述代码中，强制将m.h转化为右值，从而实现移动构造。对于一些简单的，不含任何资源的的类型来说，就无需实现移动语义了。有了移动语义，可以实现高性能的置换函数。\n\n```cpp\ntemplate <class T>\nvoid swap(T &a, T &b)\n{\n    T tmp(move(a));\n    a = move(b);\n    b = move(tmp);\n}\n```","source":"_posts/4.md","raw":"---\ntitle: 右值引用与移动语义\ndate: 2019-2-24 15:06:34\ntags: C++\ncategories: 编程语言\n---\n\n什么是右值？在C++中，一种被广泛认可的说法是，不能取地址，没有名字的就是右值，通常位于等号右边，相反，位于等号左边的，能取地址，有名字的被称为左值。\n<!--more-->\n\n```\na = b + c\n```\n\n例如上式中，a就是个左值，b+c则是右值。\n\nC++11又将右值分为纯右值和将亡值。纯右值包括：不跟对象关联的字面值，一些运算表达式(如1+3)。将亡值是跟右值引用相关的表达式，比如右值引用`T&&`函数的返回值，`std::move`的返回值。\n\n右值引用就是对一个右值进行引用的类型。右值引用主要是为了移动语义，而移动语义则需要右值是可以被更改的，这也是为什么不用常量引用。只有绑定右值的引用类型，就能够延长右值的生命期。\n\n`std::move`的功能是将左值强制转换为右值引用。\n\n接下来看个例子：\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nclass HugeMem\n{\n  public:\n    HugeMem(int size) : sz(size > 0 ? size : 1)\n    {\n        c = new int[sz];\n    }\n    ~HugeMem() { delete[] c; }\n    HugeMem(HugeMem &&h) : sz(h.sz), c(h.c)\n    {\n        h.c = nullptr;\n    }\n    int sz;\n    int *c;\n};\n\nclass Moveable\n{\n  public:\n    Moveable() : i(new int(3)), h(1024) {}\n    ~Moveable() { delete i; }\n    Moveable(Moveable &&m) : i(m.i), h(move(m.h))\n    {\n        m.i = nullptr;\n    }\n    int *i;\n    HugeMem h;\n};\n\n```\n\n上述代码中，强制将m.h转化为右值，从而实现移动构造。对于一些简单的，不含任何资源的的类型来说，就无需实现移动语义了。有了移动语义，可以实现高性能的置换函数。\n\n```cpp\ntemplate <class T>\nvoid swap(T &a, T &b)\n{\n    T tmp(move(a));\n    a = move(b);\n    b = move(tmp);\n}\n```","slug":"4","published":1,"updated":"2020-07-12T05:10:45.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcimf1sb0005ocuogkdebhbc","content":"<p>什么是右值？在C++中，一种被广泛认可的说法是，不能取地址，没有名字的就是右值，通常位于等号右边，相反，位于等号左边的，能取地址，有名字的被称为左值。</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a &#x3D; b + c</span><br></pre></td></tr></table></figure>\n\n<p>例如上式中，a就是个左值，b+c则是右值。</p>\n<p>C++11又将右值分为纯右值和将亡值。纯右值包括：不跟对象关联的字面值，一些运算表达式(如1+3)。将亡值是跟右值引用相关的表达式，比如右值引用<code>T&amp;&amp;</code>函数的返回值，<code>std::move</code>的返回值。</p>\n<p>右值引用就是对一个右值进行引用的类型。右值引用主要是为了移动语义，而移动语义则需要右值是可以被更改的，这也是为什么不用常量引用。只有绑定右值的引用类型，就能够延长右值的生命期。</p>\n<p><code>std::move</code>的功能是将左值强制转换为右值引用。</p>\n<p>接下来看个例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HugeMem</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    HugeMem(<span class=\"keyword\">int</span> size) : sz(size &gt; <span class=\"number\">0</span> ? size : <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[sz];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~HugeMem() &#123; <span class=\"keyword\">delete</span>[] c; &#125;</span><br><span class=\"line\">    HugeMem(HugeMem &amp;&amp;h) : sz(h.sz), c(h.c)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        h.c = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sz;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *c;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Moveable</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Moveable() : i(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">3</span>)), h(<span class=\"number\">1024</span>) &#123;&#125;</span><br><span class=\"line\">    ~Moveable() &#123; <span class=\"keyword\">delete</span> i; &#125;</span><br><span class=\"line\">    Moveable(Moveable &amp;&amp;m) : i(m.i), h(move(m.h))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m.i = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *i;</span><br><span class=\"line\">    HugeMem h;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码中，强制将m.h转化为右值，从而实现移动构造。对于一些简单的，不含任何资源的的类型来说，就无需实现移动语义了。有了移动语义，可以实现高性能的置换函数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">swap</span>(<span class=\"title\">T</span> &amp;<span class=\"title\">a</span>, <span class=\"title\">T</span> &amp;<span class=\"title\">b</span>)</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">tmp</span><span class=\"params\">(move(a))</span></span>;</span><br><span class=\"line\">    a = move(b);</span><br><span class=\"line\">    b = move(tmp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>什么是右值？在C++中，一种被广泛认可的说法是，不能取地址，没有名字的就是右值，通常位于等号右边，相反，位于等号左边的，能取地址，有名字的被称为左值。</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a &#x3D; b + c</span><br></pre></td></tr></table></figure>\n\n<p>例如上式中，a就是个左值，b+c则是右值。</p>\n<p>C++11又将右值分为纯右值和将亡值。纯右值包括：不跟对象关联的字面值，一些运算表达式(如1+3)。将亡值是跟右值引用相关的表达式，比如右值引用<code>T&amp;&amp;</code>函数的返回值，<code>std::move</code>的返回值。</p>\n<p>右值引用就是对一个右值进行引用的类型。右值引用主要是为了移动语义，而移动语义则需要右值是可以被更改的，这也是为什么不用常量引用。只有绑定右值的引用类型，就能够延长右值的生命期。</p>\n<p><code>std::move</code>的功能是将左值强制转换为右值引用。</p>\n<p>接下来看个例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HugeMem</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    HugeMem(<span class=\"keyword\">int</span> size) : sz(size &gt; <span class=\"number\">0</span> ? size : <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[sz];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~HugeMem() &#123; <span class=\"keyword\">delete</span>[] c; &#125;</span><br><span class=\"line\">    HugeMem(HugeMem &amp;&amp;h) : sz(h.sz), c(h.c)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        h.c = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sz;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *c;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Moveable</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Moveable() : i(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">3</span>)), h(<span class=\"number\">1024</span>) &#123;&#125;</span><br><span class=\"line\">    ~Moveable() &#123; <span class=\"keyword\">delete</span> i; &#125;</span><br><span class=\"line\">    Moveable(Moveable &amp;&amp;m) : i(m.i), h(move(m.h))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m.i = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *i;</span><br><span class=\"line\">    HugeMem h;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码中，强制将m.h转化为右值，从而实现移动构造。对于一些简单的，不含任何资源的的类型来说，就无需实现移动语义了。有了移动语义，可以实现高性能的置换函数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">swap</span>(<span class=\"title\">T</span> &amp;<span class=\"title\">a</span>, <span class=\"title\">T</span> &amp;<span class=\"title\">b</span>)</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">tmp</span><span class=\"params\">(move(a))</span></span>;</span><br><span class=\"line\">    a = move(b);</span><br><span class=\"line\">    b = move(tmp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"快速幂与模运算","date":"2019-05-15T09:21:41.000Z","mathjax":true,"_content":"[例题](https://www.luogu.org/problemnew/show/P1226):\n\n> 输入 `b`，`p`，`k` 的值，求 `b`^`p` mod `k` 的值。其中 `b`，`p`，`k` 为长整型数。\n<!--more-->\n\n1. 快速幂\n\n假设`p`=`22`，那么`p`可以用`16`+`4`+`2`表示，即 $2^4+2^2+2^1$ 表示\n<br />\n上代码(没求模)：\n\n```cpp\nusing ll = long long;\n\nll pow_mod(ll b, ll p)\n{\n    ll res = 1;\n    while (p > 0)\n    {\n        if (p & 1)\n        {\n            res = (res * b);//当前位为1，则乘以b\n        }\n        b = (b * b);//求下一位的b\n        p >>= 1;\n    }\n    return res ;\n}\n```\n\n1. 模运算\n\n\n$$\n(A+B) \\mod b=(A \\mod b+B \\mod b) \\mod b\n$$\n\n$$\n(A×B) \\mod b =((A \\mod b)×(B \\mod b)) \\mod b\n$$\n\n\n\n所以上面那题的可以写出来了\n```cpp\n#include <stdio.h>\n\nusing ll = long long;\n\nll pow_mod(ll b, ll p, ll k)\n{\n    ll res = 1;\n    while (p > 0)\n    {\n        if (p & 1)\n        {\n            res = (res * b) % k;\n        }\n        b = (b * b) % k;\n        p >>= 1;\n    }\n    return res % k;\n}\n\nint main()\n{\n    ll b, p, k;\n    scanf(\"%lld%lld%lld\", &b, &p, &k);\n    ll res = pow_mod(b, p, k);\n    printf(\"%lld^%lld mod %lld=%lld\", b, p, k, res);\n    return 0;\n}\n```\n","source":"_posts/5.md","raw":"---\ntitle: 快速幂与模运算\ndate: 2019-05-15 17:21:41\ncategories: 算法\nmathjax: true\n---\n[例题](https://www.luogu.org/problemnew/show/P1226):\n\n> 输入 `b`，`p`，`k` 的值，求 `b`^`p` mod `k` 的值。其中 `b`，`p`，`k` 为长整型数。\n<!--more-->\n\n1. 快速幂\n\n假设`p`=`22`，那么`p`可以用`16`+`4`+`2`表示，即 $2^4+2^2+2^1$ 表示\n<br />\n上代码(没求模)：\n\n```cpp\nusing ll = long long;\n\nll pow_mod(ll b, ll p)\n{\n    ll res = 1;\n    while (p > 0)\n    {\n        if (p & 1)\n        {\n            res = (res * b);//当前位为1，则乘以b\n        }\n        b = (b * b);//求下一位的b\n        p >>= 1;\n    }\n    return res ;\n}\n```\n\n1. 模运算\n\n\n$$\n(A+B) \\mod b=(A \\mod b+B \\mod b) \\mod b\n$$\n\n$$\n(A×B) \\mod b =((A \\mod b)×(B \\mod b)) \\mod b\n$$\n\n\n\n所以上面那题的可以写出来了\n```cpp\n#include <stdio.h>\n\nusing ll = long long;\n\nll pow_mod(ll b, ll p, ll k)\n{\n    ll res = 1;\n    while (p > 0)\n    {\n        if (p & 1)\n        {\n            res = (res * b) % k;\n        }\n        b = (b * b) % k;\n        p >>= 1;\n    }\n    return res % k;\n}\n\nint main()\n{\n    ll b, p, k;\n    scanf(\"%lld%lld%lld\", &b, &p, &k);\n    ll res = pow_mod(b, p, k);\n    printf(\"%lld^%lld mod %lld=%lld\", b, p, k, res);\n    return 0;\n}\n```\n","slug":"5","published":1,"updated":"2020-07-12T05:10:49.745Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcimf1sd0007ocuo46jvgxkt","content":"<p><a href=\"https://www.luogu.org/problemnew/show/P1226\" target=\"_blank\" rel=\"noopener\">例题</a>:</p>\n<blockquote>\n<p>输入 <code>b</code>，<code>p</code>，<code>k</code> 的值，求 <code>b</code>^<code>p</code> mod <code>k</code> 的值。其中 <code>b</code>，<code>p</code>，<code>k</code> 为长整型数。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<ol>\n<li>快速幂</li>\n</ol>\n<p>假设<code>p</code>=<code>22</code>，那么<code>p</code>可以用<code>16</code>+<code>4</code>+<code>2</code>表示，即 $2^4+2^2+2^1$ 表示<br><br /><br>上代码(没求模)：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">pow_mod</span><span class=\"params\">(ll b, ll p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res = (res * b);<span class=\"comment\">//当前位为1，则乘以b</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        b = (b * b);<span class=\"comment\">//求下一位的b</span></span><br><span class=\"line\">        p &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>模运算</li>\n</ol>\n<p>$$<br>(A+B) \\mod b=(A \\mod b+B \\mod b) \\mod b<br>$$</p>\n<p>$$<br>(A×B) \\mod b =((A \\mod b)×(B \\mod b)) \\mod b<br>$$</p>\n<p>所以上面那题的可以写出来了</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">pow_mod</span><span class=\"params\">(ll b, ll p, ll k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res = (res * b) % k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        b = (b * b) % k;</span><br><span class=\"line\">        p &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res % k;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll b, p, k;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld%lld%lld\"</span>, &amp;b, &amp;p, &amp;k);</span><br><span class=\"line\">    ll res = pow_mod(b, p, k);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld^%lld mod %lld=%lld\"</span>, b, p, k, res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://www.luogu.org/problemnew/show/P1226\" target=\"_blank\" rel=\"noopener\">例题</a>:</p>\n<blockquote>\n<p>输入 <code>b</code>，<code>p</code>，<code>k</code> 的值，求 <code>b</code>^<code>p</code> mod <code>k</code> 的值。其中 <code>b</code>，<code>p</code>，<code>k</code> 为长整型数。</p>\n</blockquote>","more":"<ol>\n<li>快速幂</li>\n</ol>\n<p>假设<code>p</code>=<code>22</code>，那么<code>p</code>可以用<code>16</code>+<code>4</code>+<code>2</code>表示，即 $2^4+2^2+2^1$ 表示<br><br /><br>上代码(没求模)：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">pow_mod</span><span class=\"params\">(ll b, ll p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res = (res * b);<span class=\"comment\">//当前位为1，则乘以b</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        b = (b * b);<span class=\"comment\">//求下一位的b</span></span><br><span class=\"line\">        p &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>模运算</li>\n</ol>\n<p>$$<br>(A+B) \\mod b=(A \\mod b+B \\mod b) \\mod b<br>$$</p>\n<p>$$<br>(A×B) \\mod b =((A \\mod b)×(B \\mod b)) \\mod b<br>$$</p>\n<p>所以上面那题的可以写出来了</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">pow_mod</span><span class=\"params\">(ll b, ll p, ll k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res = (res * b) % k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        b = (b * b) % k;</span><br><span class=\"line\">        p &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res % k;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll b, p, k;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld%lld%lld\"</span>, &amp;b, &amp;p, &amp;k);</span><br><span class=\"line\">    ll res = pow_mod(b, p, k);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld^%lld mod %lld=%lld\"</span>, b, p, k, res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"JavaScript中闭包和this的一些理解","date":"2020-04-28T05:02:27.000Z","_content":"\n### 循环与闭包\n\n在一次面试中，面试官出了这样一道题，让我说出运行结果\n\n```javascript\nfor(var i=1;i<=5;i++){\n    setTimeout(()=>{\n        console.log(i);\n    },i*1000);\n}\n```\n<!--more-->\n\n这段代码在运行时会以每秒一次的频率输出五次 6。\n\n首先，延迟函数的回调会在循环结束时才执行(具体内容可以了解一下事件循环)。根据作用域的工作原理，它们都被封闭在一个共享的全局作用域中，因此实际上只有一个 `i`，所有函数共享一个 `i` 的引用。\n\n可以按照下面来改进：\n\n```javascript\nfor (var i=1; i<=5; i++) {\n\t(function(j) {\n\t\tsetTimeout(()=>{\n\t\t\tconsole.log( j );\n\t\t}, j*1000 );\n\t})( i );\n}\n//打印1到5\n```\n\n`IIFE`(立即调用函数表达式)会为每个迭代都生成一个新的作用域，使得延迟函数的回调可以将新的 作用域封闭在每个迭代内部，每个迭代中都会含有一个具有正确值的变量供我们访问。\n\n如果你知道ES6的`let`，特点是具有块作用域，`for`循环的`let`每次迭代都会用上一次迭代结束的值初始化这个变量，所以还可以这样写：\n\n```javascript\nfor (let i=1; i<=5; i++) {\n\tsetTimeout(()=>{\n\t\tconsole.log( i );\n\t}, i*1000 );\n}\n//打印1到5\n```\n\n### 普通匿名函数和箭头函数的`this`\n\n`this` 对象是在运行时基于函数的执行环境绑定的：在全局函数中，`this` 等于 `window`，而当函数被作为某个对象的方法调用时，`this` 等于那个对象。绑定`this`指向等问题这里不做讨论。\n\n在匿名函数中使用 `this` 对象也可能会导致一些问题。匿名函数的执行环境具有全局性，其` this` 对象通常指向` window`，而在严格模式下则是`undifined`。\n\n```javascript\nvar name = \"The Window\";\nvar object = {\n\tname : \"My Object\",\n\tgetNameFunc : function(){\n\t\treturn function(){\n\t\t\treturn this.name;\n\t\t};\n \t}\n};\nalert(object.getNameFunc()()); //\"The Window\"（在非严格模式下）\n```\n\n箭头函数的函数体内的`this`对象，就是定义时所在的对象，而不是使用时所在的对象。箭头函数可以让`setTimeout`里面的`this`，绑定定义时所在的作用域\n\n```javascript\nfunction foo() {\n  setTimeout(() => {\n    console.log('id:', this.id);\n  }, 100);\n}\n\nvar id = 21;\n\nfoo.call({ id: 42 });\n// id: 42\n```\n\n如果是普通函数，执行时`this`应该指向全局对象`window`，这时应该输出`21`\n\n```javascript\nfunction foo() {\n  setTimeout(function() {\n    console.log('id:', this.id);\n  }, 100);\n}\nvar id = 21;\nfoo.call({ id: 42 });\n// id: 21\n```\n\n箭头函数的`this`就是外层作用域的`this`，所以它的`this`指向是相对固定化的。","source":"_posts/js-this.md","raw":"---\ntitle: JavaScript中闭包和this的一些理解\ndate: 2020-04-28 13:02:27\ntags:\n\t- JavaScript\ncategories: 编程语言\n---\n\n### 循环与闭包\n\n在一次面试中，面试官出了这样一道题，让我说出运行结果\n\n```javascript\nfor(var i=1;i<=5;i++){\n    setTimeout(()=>{\n        console.log(i);\n    },i*1000);\n}\n```\n<!--more-->\n\n这段代码在运行时会以每秒一次的频率输出五次 6。\n\n首先，延迟函数的回调会在循环结束时才执行(具体内容可以了解一下事件循环)。根据作用域的工作原理，它们都被封闭在一个共享的全局作用域中，因此实际上只有一个 `i`，所有函数共享一个 `i` 的引用。\n\n可以按照下面来改进：\n\n```javascript\nfor (var i=1; i<=5; i++) {\n\t(function(j) {\n\t\tsetTimeout(()=>{\n\t\t\tconsole.log( j );\n\t\t}, j*1000 );\n\t})( i );\n}\n//打印1到5\n```\n\n`IIFE`(立即调用函数表达式)会为每个迭代都生成一个新的作用域，使得延迟函数的回调可以将新的 作用域封闭在每个迭代内部，每个迭代中都会含有一个具有正确值的变量供我们访问。\n\n如果你知道ES6的`let`，特点是具有块作用域，`for`循环的`let`每次迭代都会用上一次迭代结束的值初始化这个变量，所以还可以这样写：\n\n```javascript\nfor (let i=1; i<=5; i++) {\n\tsetTimeout(()=>{\n\t\tconsole.log( i );\n\t}, i*1000 );\n}\n//打印1到5\n```\n\n### 普通匿名函数和箭头函数的`this`\n\n`this` 对象是在运行时基于函数的执行环境绑定的：在全局函数中，`this` 等于 `window`，而当函数被作为某个对象的方法调用时，`this` 等于那个对象。绑定`this`指向等问题这里不做讨论。\n\n在匿名函数中使用 `this` 对象也可能会导致一些问题。匿名函数的执行环境具有全局性，其` this` 对象通常指向` window`，而在严格模式下则是`undifined`。\n\n```javascript\nvar name = \"The Window\";\nvar object = {\n\tname : \"My Object\",\n\tgetNameFunc : function(){\n\t\treturn function(){\n\t\t\treturn this.name;\n\t\t};\n \t}\n};\nalert(object.getNameFunc()()); //\"The Window\"（在非严格模式下）\n```\n\n箭头函数的函数体内的`this`对象，就是定义时所在的对象，而不是使用时所在的对象。箭头函数可以让`setTimeout`里面的`this`，绑定定义时所在的作用域\n\n```javascript\nfunction foo() {\n  setTimeout(() => {\n    console.log('id:', this.id);\n  }, 100);\n}\n\nvar id = 21;\n\nfoo.call({ id: 42 });\n// id: 42\n```\n\n如果是普通函数，执行时`this`应该指向全局对象`window`，这时应该输出`21`\n\n```javascript\nfunction foo() {\n  setTimeout(function() {\n    console.log('id:', this.id);\n  }, 100);\n}\nvar id = 21;\nfoo.call({ id: 42 });\n// id: 21\n```\n\n箭头函数的`this`就是外层作用域的`this`，所以它的`this`指向是相对固定化的。","slug":"js-this","published":1,"updated":"2020-07-12T05:11:43.645Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcimf1sg0009ocuocpoy02kk","content":"<h3 id=\"循环与闭包\"><a href=\"#循环与闭包\" class=\"headerlink\" title=\"循环与闭包\"></a>循环与闭包</h3><p>在一次面试中，面试官出了这样一道题，让我说出运行结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">    &#125;,i*<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n\n<p>这段代码在运行时会以每秒一次的频率输出五次 6。</p>\n<p>首先，延迟函数的回调会在循环结束时才执行(具体内容可以了解一下事件循环)。根据作用域的工作原理，它们都被封闭在一个共享的全局作用域中，因此实际上只有一个 <code>i</code>，所有函数共享一个 <code>i</code> 的引用。</p>\n<p>可以按照下面来改进：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>) </span>&#123;</span><br><span class=\"line\">\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log( j );</span><br><span class=\"line\">\t\t&#125;, j*<span class=\"number\">1000</span> );</span><br><span class=\"line\">\t&#125;)( i );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//打印1到5</span></span><br></pre></td></tr></table></figure>\n\n<p><code>IIFE</code>(立即调用函数表达式)会为每个迭代都生成一个新的作用域，使得延迟函数的回调可以将新的 作用域封闭在每个迭代内部，每个迭代中都会含有一个具有正确值的变量供我们访问。</p>\n<p>如果你知道ES6的<code>let</code>，特点是具有块作用域，<code>for</code>循环的<code>let</code>每次迭代都会用上一次迭代结束的值初始化这个变量，所以还可以这样写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log( i );</span><br><span class=\"line\">\t&#125;, i*<span class=\"number\">1000</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//打印1到5</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"普通匿名函数和箭头函数的this\"><a href=\"#普通匿名函数和箭头函数的this\" class=\"headerlink\" title=\"普通匿名函数和箭头函数的this\"></a>普通匿名函数和箭头函数的<code>this</code></h3><p><code>this</code> 对象是在运行时基于函数的执行环境绑定的：在全局函数中，<code>this</code> 等于 <code>window</code>，而当函数被作为某个对象的方法调用时，<code>this</code> 等于那个对象。绑定<code>this</code>指向等问题这里不做讨论。</p>\n<p>在匿名函数中使用 <code>this</code> 对象也可能会导致一些问题。匿名函数的执行环境具有全局性，其<code>this</code> 对象通常指向<code>window</code>，而在严格模式下则是<code>undifined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">\tname : <span class=\"string\">\"My Object\"</span>,</span><br><span class=\"line\">\tgetNameFunc : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">alert(object.getNameFunc()()); <span class=\"comment\">//\"The Window\"（在非严格模式下）</span></span><br></pre></td></tr></table></figure>\n\n<p>箭头函数的函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象。箭头函数可以让<code>setTimeout</code>里面的<code>this</code>，绑定定义时所在的作用域</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'id:'</span>, <span class=\"keyword\">this</span>.id);</span><br><span class=\"line\">  &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> id = <span class=\"number\">21</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">foo.call(&#123; <span class=\"attr\">id</span>: <span class=\"number\">42</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// id: 42</span></span><br></pre></td></tr></table></figure>\n\n<p>如果是普通函数，执行时<code>this</code>应该指向全局对象<code>window</code>，这时应该输出<code>21</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'id:'</span>, <span class=\"keyword\">this</span>.id);</span><br><span class=\"line\">  &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> id = <span class=\"number\">21</span>;</span><br><span class=\"line\">foo.call(&#123; <span class=\"attr\">id</span>: <span class=\"number\">42</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// id: 21</span></span><br></pre></td></tr></table></figure>\n\n<p>箭头函数的<code>this</code>就是外层作用域的<code>this</code>，所以它的<code>this</code>指向是相对固定化的。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"循环与闭包\"><a href=\"#循环与闭包\" class=\"headerlink\" title=\"循环与闭包\"></a>循环与闭包</h3><p>在一次面试中，面试官出了这样一道题，让我说出运行结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">    &#125;,i*<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>这段代码在运行时会以每秒一次的频率输出五次 6。</p>\n<p>首先，延迟函数的回调会在循环结束时才执行(具体内容可以了解一下事件循环)。根据作用域的工作原理，它们都被封闭在一个共享的全局作用域中，因此实际上只有一个 <code>i</code>，所有函数共享一个 <code>i</code> 的引用。</p>\n<p>可以按照下面来改进：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>) </span>&#123;</span><br><span class=\"line\">\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log( j );</span><br><span class=\"line\">\t\t&#125;, j*<span class=\"number\">1000</span> );</span><br><span class=\"line\">\t&#125;)( i );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//打印1到5</span></span><br></pre></td></tr></table></figure>\n\n<p><code>IIFE</code>(立即调用函数表达式)会为每个迭代都生成一个新的作用域，使得延迟函数的回调可以将新的 作用域封闭在每个迭代内部，每个迭代中都会含有一个具有正确值的变量供我们访问。</p>\n<p>如果你知道ES6的<code>let</code>，特点是具有块作用域，<code>for</code>循环的<code>let</code>每次迭代都会用上一次迭代结束的值初始化这个变量，所以还可以这样写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log( i );</span><br><span class=\"line\">\t&#125;, i*<span class=\"number\">1000</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//打印1到5</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"普通匿名函数和箭头函数的this\"><a href=\"#普通匿名函数和箭头函数的this\" class=\"headerlink\" title=\"普通匿名函数和箭头函数的this\"></a>普通匿名函数和箭头函数的<code>this</code></h3><p><code>this</code> 对象是在运行时基于函数的执行环境绑定的：在全局函数中，<code>this</code> 等于 <code>window</code>，而当函数被作为某个对象的方法调用时，<code>this</code> 等于那个对象。绑定<code>this</code>指向等问题这里不做讨论。</p>\n<p>在匿名函数中使用 <code>this</code> 对象也可能会导致一些问题。匿名函数的执行环境具有全局性，其<code>this</code> 对象通常指向<code>window</code>，而在严格模式下则是<code>undifined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">\tname : <span class=\"string\">\"My Object\"</span>,</span><br><span class=\"line\">\tgetNameFunc : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">alert(object.getNameFunc()()); <span class=\"comment\">//\"The Window\"（在非严格模式下）</span></span><br></pre></td></tr></table></figure>\n\n<p>箭头函数的函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象。箭头函数可以让<code>setTimeout</code>里面的<code>this</code>，绑定定义时所在的作用域</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'id:'</span>, <span class=\"keyword\">this</span>.id);</span><br><span class=\"line\">  &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> id = <span class=\"number\">21</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">foo.call(&#123; <span class=\"attr\">id</span>: <span class=\"number\">42</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// id: 42</span></span><br></pre></td></tr></table></figure>\n\n<p>如果是普通函数，执行时<code>this</code>应该指向全局对象<code>window</code>，这时应该输出<code>21</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'id:'</span>, <span class=\"keyword\">this</span>.id);</span><br><span class=\"line\">  &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> id = <span class=\"number\">21</span>;</span><br><span class=\"line\">foo.call(&#123; <span class=\"attr\">id</span>: <span class=\"number\">42</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// id: 21</span></span><br></pre></td></tr></table></figure>\n\n<p>箭头函数的<code>this</code>就是外层作用域的<code>this</code>，所以它的<code>this</code>指向是相对固定化的。</p>"},{"title":"在服务器上部署项目","date":"2020-07-11T07:17:19.000Z","_content":"\n我购买的是阿里云的学生机，操作系统是CentOS\n部署的项目是Nodejs和React的前后端分离项目，需要安装配置nodejs，mysql，nginx等\n<!--more-->\n\n## 首先安装nvm\n\n安装git\n```bash\nyum install git -y\n```\n\n下载nvm\n```bash\ngit clone git://github.com/creationix/nvm.git ~/nvm\n```\n\n设置nvm到bash\n```bash\necho \"source ~/nvm/nvm.sh\" >> ~/.bashrc\nsource ~/.bashrc\n```\n\n查询node版本\n```bash\nnvm list-remote\n```\n安装node.js\n```bash\nnvm install v12.0.0\n```\n使用nodejs\n```bash\nnvm use v12.0.0\n```\n\n## 安装nginx\n\n```bash\nyum -y install nginx\n```\nnginx相关操作\n```bash\nnginx -h    #查看帮助\nnginx -c filename  #设置配置文件并启动nginx\nnginx -t    #测试配置文件是否正确 \n```\n\n## 安装mysql\n\n下载mysql5.7\n```bash\nwget https://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm\n```\n\n进行repo安装\n```bash\nrpm -ivh mysql57-community-release-el7-9.noarch.rpm\n```\n进入到 /etc/yum.repos.d/目录，执行\n```bash\nyum install mysql-server\n```\n\n启动mysql\n```bash\nsystemctl start mysqld\nsystemctl restart mysqld # 重启mysql\n```\n\n获取临时密码\n```bash\ngrep 'temporary password' /var/log/mysqld.log\n```\n\n登录mysql，输入刚刚获取到的临时密码\n```bash\nmysql -u root -p\n```\n设置密码强度要求\n```bash\nset global validate_password_policy=LOW;\n```\n\n更改密码\n```bash\nALTER USER 'root'@'localhost' IDENTIFIED BY '123456';#把123456替换为你自己的密码\n```\n\n## 设置mysql默认编码为utf8\n```bash\nsudo vim /etc/my.cnf\n```\n1. 在[client]字段里加入default-character-set=utf8 \n2. 在[mysql]字段里加入default-character-set=utf8\n3. 在[mysqld]字段里加入character-set-server=utf8\n\n## 安装pm2\n```bash\nnpm install -g pm2\n```\npm2 常用命令\n```bash\npm2 start app.js --name my-api # 命名进程\npm2 list               # 显示所有进程状态\npm2 logs               #  显示所有进程日志\npm2 stop all           # 停止所有进程\npm2 restart all        # 重启所有进程\npm2 stop 0             # 停止指定的进程\npm2 restart 0          # 重启指定的进程\npm2 delete 0           # 杀死指定的进程\n```\n\n\n\n## 部署项目到nginx，并使用nginx反向代理\n把项目从github上clone下来，前端项目执行`npm build`后\n可以在`/etc/nginx/conf.d/`目录下新建一个react-blog.conf，然后编辑这个文件\n配置如下:\n```\nserver {\n    listen      7890;#服务器内部使用的端口号\n    server_name 127.0.0.1;#(自己的服务器IP)\n\n    root    /home/user/code/koa-blog/react-blog/build/;#build后的目录\n    index   index.html;\n}\n```\n然后打开`/etc/nginx/nginx.conf`这个文件\n在server下再加上\n\n```\nserver {\n    listen 8078;\n    server_name example.com;\n    location / {\n        proxy_pass http://localhost:8078;\n    }\n}\n```\n要在服务器提供商的管理网页中开放8078端口。\n由于使用80端口需要备案，所以可以先用其他端口代替\n\n后端使用pm2进行运行，假设运行后端程序提供的端口为6543\n那么该端口也可以通过nginx进行反向代理\n```\nserver {\n    listen 8078;\n    server_name api.example.com;\n    location / {\n        proxy_pass http://localhost:6543;\n    }\n}\n\n```\n所以对外部统一保留8078端口即可，可以根据不同的域名来访问不同的服务。\n\n参考链接：\n[mysql安装](https://blog.csdn.net/wohiusdashi/article/details/89358071)\n[mysql编码设置](https://www.cnblogs.com/roujiamo/p/10824511.html)\n[pm2相关](https://www.cnblogs.com/i6010/articles/10857543.html)","source":"_posts/在服务器上部署项目.md","raw":"---\ntitle: 在服务器上部署项目\ndate: 2020-07-11 15:17:19\ntags:\n    - Linux\n---\n\n我购买的是阿里云的学生机，操作系统是CentOS\n部署的项目是Nodejs和React的前后端分离项目，需要安装配置nodejs，mysql，nginx等\n<!--more-->\n\n## 首先安装nvm\n\n安装git\n```bash\nyum install git -y\n```\n\n下载nvm\n```bash\ngit clone git://github.com/creationix/nvm.git ~/nvm\n```\n\n设置nvm到bash\n```bash\necho \"source ~/nvm/nvm.sh\" >> ~/.bashrc\nsource ~/.bashrc\n```\n\n查询node版本\n```bash\nnvm list-remote\n```\n安装node.js\n```bash\nnvm install v12.0.0\n```\n使用nodejs\n```bash\nnvm use v12.0.0\n```\n\n## 安装nginx\n\n```bash\nyum -y install nginx\n```\nnginx相关操作\n```bash\nnginx -h    #查看帮助\nnginx -c filename  #设置配置文件并启动nginx\nnginx -t    #测试配置文件是否正确 \n```\n\n## 安装mysql\n\n下载mysql5.7\n```bash\nwget https://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm\n```\n\n进行repo安装\n```bash\nrpm -ivh mysql57-community-release-el7-9.noarch.rpm\n```\n进入到 /etc/yum.repos.d/目录，执行\n```bash\nyum install mysql-server\n```\n\n启动mysql\n```bash\nsystemctl start mysqld\nsystemctl restart mysqld # 重启mysql\n```\n\n获取临时密码\n```bash\ngrep 'temporary password' /var/log/mysqld.log\n```\n\n登录mysql，输入刚刚获取到的临时密码\n```bash\nmysql -u root -p\n```\n设置密码强度要求\n```bash\nset global validate_password_policy=LOW;\n```\n\n更改密码\n```bash\nALTER USER 'root'@'localhost' IDENTIFIED BY '123456';#把123456替换为你自己的密码\n```\n\n## 设置mysql默认编码为utf8\n```bash\nsudo vim /etc/my.cnf\n```\n1. 在[client]字段里加入default-character-set=utf8 \n2. 在[mysql]字段里加入default-character-set=utf8\n3. 在[mysqld]字段里加入character-set-server=utf8\n\n## 安装pm2\n```bash\nnpm install -g pm2\n```\npm2 常用命令\n```bash\npm2 start app.js --name my-api # 命名进程\npm2 list               # 显示所有进程状态\npm2 logs               #  显示所有进程日志\npm2 stop all           # 停止所有进程\npm2 restart all        # 重启所有进程\npm2 stop 0             # 停止指定的进程\npm2 restart 0          # 重启指定的进程\npm2 delete 0           # 杀死指定的进程\n```\n\n\n\n## 部署项目到nginx，并使用nginx反向代理\n把项目从github上clone下来，前端项目执行`npm build`后\n可以在`/etc/nginx/conf.d/`目录下新建一个react-blog.conf，然后编辑这个文件\n配置如下:\n```\nserver {\n    listen      7890;#服务器内部使用的端口号\n    server_name 127.0.0.1;#(自己的服务器IP)\n\n    root    /home/user/code/koa-blog/react-blog/build/;#build后的目录\n    index   index.html;\n}\n```\n然后打开`/etc/nginx/nginx.conf`这个文件\n在server下再加上\n\n```\nserver {\n    listen 8078;\n    server_name example.com;\n    location / {\n        proxy_pass http://localhost:8078;\n    }\n}\n```\n要在服务器提供商的管理网页中开放8078端口。\n由于使用80端口需要备案，所以可以先用其他端口代替\n\n后端使用pm2进行运行，假设运行后端程序提供的端口为6543\n那么该端口也可以通过nginx进行反向代理\n```\nserver {\n    listen 8078;\n    server_name api.example.com;\n    location / {\n        proxy_pass http://localhost:6543;\n    }\n}\n\n```\n所以对外部统一保留8078端口即可，可以根据不同的域名来访问不同的服务。\n\n参考链接：\n[mysql安装](https://blog.csdn.net/wohiusdashi/article/details/89358071)\n[mysql编码设置](https://www.cnblogs.com/roujiamo/p/10824511.html)\n[pm2相关](https://www.cnblogs.com/i6010/articles/10857543.html)","slug":"在服务器上部署项目","published":1,"updated":"2020-07-12T05:11:36.559Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcimf1si000aocuoh5py4vvi","content":"<p>我购买的是阿里云的学生机，操作系统是CentOS<br>部署的项目是Nodejs和React的前后端分离项目，需要安装配置nodejs，mysql，nginx等</p>\n<a id=\"more\"></a>\n\n<h2 id=\"首先安装nvm\"><a href=\"#首先安装nvm\" class=\"headerlink\" title=\"首先安装nvm\"></a>首先安装nvm</h2><p>安装git</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git -y</span><br></pre></td></tr></table></figure>\n\n<p>下载nvm</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/creationix/nvm.git ~/nvm</span><br></pre></td></tr></table></figure>\n\n<p>设置nvm到bash</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"source ~/nvm/nvm.sh\"</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>查询node版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm list-remote</span><br></pre></td></tr></table></figure>\n<p>安装node.js</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install v12.0.0</span><br></pre></td></tr></table></figure>\n<p>使用nodejs</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use v12.0.0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install nginx</span><br></pre></td></tr></table></figure>\n<p>nginx相关操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -h    <span class=\"comment\">#查看帮助</span></span><br><span class=\"line\">nginx -c filename  <span class=\"comment\">#设置配置文件并启动nginx</span></span><br><span class=\"line\">nginx -t    <span class=\"comment\">#测试配置文件是否正确</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h2><p>下载mysql5.7</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>进行repo安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh mysql57-community-release-el7-9.noarch.rpm</span><br></pre></td></tr></table></figure>\n<p>进入到 /etc/yum.repos.d/目录，执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mysql-server</span><br></pre></td></tr></table></figure>\n\n<p>启动mysql</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mysqld</span><br><span class=\"line\">systemctl restart mysqld <span class=\"comment\"># 重启mysql</span></span><br></pre></td></tr></table></figure>\n\n<p>获取临时密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep <span class=\"string\">'temporary password'</span> /var/<span class=\"built_in\">log</span>/mysqld.log</span><br></pre></td></tr></table></figure>\n\n<p>登录mysql，输入刚刚获取到的临时密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n<p>设置密码强度要求</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> global validate_password_policy=LOW;</span><br></pre></td></tr></table></figure>\n\n<p>更改密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER <span class=\"string\">'root'</span>@<span class=\"string\">'localhost'</span> IDENTIFIED BY <span class=\"string\">'123456'</span>;<span class=\"comment\">#把123456替换为你自己的密码</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置mysql默认编码为utf8\"><a href=\"#设置mysql默认编码为utf8\" class=\"headerlink\" title=\"设置mysql默认编码为utf8\"></a>设置mysql默认编码为utf8</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/my.cnf</span><br></pre></td></tr></table></figure>\n<ol>\n<li>在[client]字段里加入default-character-set=utf8 </li>\n<li>在[mysql]字段里加入default-character-set=utf8</li>\n<li>在[mysqld]字段里加入character-set-server=utf8</li>\n</ol>\n<h2 id=\"安装pm2\"><a href=\"#安装pm2\" class=\"headerlink\" title=\"安装pm2\"></a>安装pm2</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g pm2</span><br></pre></td></tr></table></figure>\n<p>pm2 常用命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start app.js --name my-api <span class=\"comment\"># 命名进程</span></span><br><span class=\"line\">pm2 list               <span class=\"comment\"># 显示所有进程状态</span></span><br><span class=\"line\">pm2 logs               <span class=\"comment\">#  显示所有进程日志</span></span><br><span class=\"line\">pm2 stop all           <span class=\"comment\"># 停止所有进程</span></span><br><span class=\"line\">pm2 restart all        <span class=\"comment\"># 重启所有进程</span></span><br><span class=\"line\">pm2 stop 0             <span class=\"comment\"># 停止指定的进程</span></span><br><span class=\"line\">pm2 restart 0          <span class=\"comment\"># 重启指定的进程</span></span><br><span class=\"line\">pm2 delete 0           <span class=\"comment\"># 杀死指定的进程</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"部署项目到nginx，并使用nginx反向代理\"><a href=\"#部署项目到nginx，并使用nginx反向代理\" class=\"headerlink\" title=\"部署项目到nginx，并使用nginx反向代理\"></a>部署项目到nginx，并使用nginx反向代理</h2><p>把项目从github上clone下来，前端项目执行<code>npm build</code>后<br>可以在<code>/etc/nginx/conf.d/</code>目录下新建一个react-blog.conf，然后编辑这个文件<br>配置如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      7890;#服务器内部使用的端口号</span><br><span class=\"line\">    server_name 127.0.0.1;#(自己的服务器IP)</span><br><span class=\"line\"></span><br><span class=\"line\">    root    &#x2F;home&#x2F;user&#x2F;code&#x2F;koa-blog&#x2F;react-blog&#x2F;build&#x2F;;#build后的目录</span><br><span class=\"line\">    index   index.html;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后打开<code>/etc/nginx/nginx.conf</code>这个文件<br>在server下再加上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 8078;</span><br><span class=\"line\">    server_name example.com;</span><br><span class=\"line\">    location &#x2F; &#123;</span><br><span class=\"line\">        proxy_pass http:&#x2F;&#x2F;localhost:8078;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要在服务器提供商的管理网页中开放8078端口。<br>由于使用80端口需要备案，所以可以先用其他端口代替</p>\n<p>后端使用pm2进行运行，假设运行后端程序提供的端口为6543<br>那么该端口也可以通过nginx进行反向代理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 8078;</span><br><span class=\"line\">    server_name api.example.com;</span><br><span class=\"line\">    location &#x2F; &#123;</span><br><span class=\"line\">        proxy_pass http:&#x2F;&#x2F;localhost:6543;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以对外部统一保留8078端口即可，可以根据不同的域名来访问不同的服务。</p>\n<p>参考链接：<br><a href=\"https://blog.csdn.net/wohiusdashi/article/details/89358071\" target=\"_blank\" rel=\"noopener\">mysql安装</a><br><a href=\"https://www.cnblogs.com/roujiamo/p/10824511.html\" target=\"_blank\" rel=\"noopener\">mysql编码设置</a><br><a href=\"https://www.cnblogs.com/i6010/articles/10857543.html\" target=\"_blank\" rel=\"noopener\">pm2相关</a></p>\n","site":{"data":{}},"excerpt":"<p>我购买的是阿里云的学生机，操作系统是CentOS<br>部署的项目是Nodejs和React的前后端分离项目，需要安装配置nodejs，mysql，nginx等</p>","more":"<h2 id=\"首先安装nvm\"><a href=\"#首先安装nvm\" class=\"headerlink\" title=\"首先安装nvm\"></a>首先安装nvm</h2><p>安装git</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git -y</span><br></pre></td></tr></table></figure>\n\n<p>下载nvm</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/creationix/nvm.git ~/nvm</span><br></pre></td></tr></table></figure>\n\n<p>设置nvm到bash</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"source ~/nvm/nvm.sh\"</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>查询node版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm list-remote</span><br></pre></td></tr></table></figure>\n<p>安装node.js</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install v12.0.0</span><br></pre></td></tr></table></figure>\n<p>使用nodejs</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use v12.0.0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install nginx</span><br></pre></td></tr></table></figure>\n<p>nginx相关操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -h    <span class=\"comment\">#查看帮助</span></span><br><span class=\"line\">nginx -c filename  <span class=\"comment\">#设置配置文件并启动nginx</span></span><br><span class=\"line\">nginx -t    <span class=\"comment\">#测试配置文件是否正确</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h2><p>下载mysql5.7</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>进行repo安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh mysql57-community-release-el7-9.noarch.rpm</span><br></pre></td></tr></table></figure>\n<p>进入到 /etc/yum.repos.d/目录，执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mysql-server</span><br></pre></td></tr></table></figure>\n\n<p>启动mysql</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mysqld</span><br><span class=\"line\">systemctl restart mysqld <span class=\"comment\"># 重启mysql</span></span><br></pre></td></tr></table></figure>\n\n<p>获取临时密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep <span class=\"string\">'temporary password'</span> /var/<span class=\"built_in\">log</span>/mysqld.log</span><br></pre></td></tr></table></figure>\n\n<p>登录mysql，输入刚刚获取到的临时密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n<p>设置密码强度要求</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> global validate_password_policy=LOW;</span><br></pre></td></tr></table></figure>\n\n<p>更改密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER <span class=\"string\">'root'</span>@<span class=\"string\">'localhost'</span> IDENTIFIED BY <span class=\"string\">'123456'</span>;<span class=\"comment\">#把123456替换为你自己的密码</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置mysql默认编码为utf8\"><a href=\"#设置mysql默认编码为utf8\" class=\"headerlink\" title=\"设置mysql默认编码为utf8\"></a>设置mysql默认编码为utf8</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/my.cnf</span><br></pre></td></tr></table></figure>\n<ol>\n<li>在[client]字段里加入default-character-set=utf8 </li>\n<li>在[mysql]字段里加入default-character-set=utf8</li>\n<li>在[mysqld]字段里加入character-set-server=utf8</li>\n</ol>\n<h2 id=\"安装pm2\"><a href=\"#安装pm2\" class=\"headerlink\" title=\"安装pm2\"></a>安装pm2</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g pm2</span><br></pre></td></tr></table></figure>\n<p>pm2 常用命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start app.js --name my-api <span class=\"comment\"># 命名进程</span></span><br><span class=\"line\">pm2 list               <span class=\"comment\"># 显示所有进程状态</span></span><br><span class=\"line\">pm2 logs               <span class=\"comment\">#  显示所有进程日志</span></span><br><span class=\"line\">pm2 stop all           <span class=\"comment\"># 停止所有进程</span></span><br><span class=\"line\">pm2 restart all        <span class=\"comment\"># 重启所有进程</span></span><br><span class=\"line\">pm2 stop 0             <span class=\"comment\"># 停止指定的进程</span></span><br><span class=\"line\">pm2 restart 0          <span class=\"comment\"># 重启指定的进程</span></span><br><span class=\"line\">pm2 delete 0           <span class=\"comment\"># 杀死指定的进程</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"部署项目到nginx，并使用nginx反向代理\"><a href=\"#部署项目到nginx，并使用nginx反向代理\" class=\"headerlink\" title=\"部署项目到nginx，并使用nginx反向代理\"></a>部署项目到nginx，并使用nginx反向代理</h2><p>把项目从github上clone下来，前端项目执行<code>npm build</code>后<br>可以在<code>/etc/nginx/conf.d/</code>目录下新建一个react-blog.conf，然后编辑这个文件<br>配置如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      7890;#服务器内部使用的端口号</span><br><span class=\"line\">    server_name 127.0.0.1;#(自己的服务器IP)</span><br><span class=\"line\"></span><br><span class=\"line\">    root    &#x2F;home&#x2F;user&#x2F;code&#x2F;koa-blog&#x2F;react-blog&#x2F;build&#x2F;;#build后的目录</span><br><span class=\"line\">    index   index.html;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后打开<code>/etc/nginx/nginx.conf</code>这个文件<br>在server下再加上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 8078;</span><br><span class=\"line\">    server_name example.com;</span><br><span class=\"line\">    location &#x2F; &#123;</span><br><span class=\"line\">        proxy_pass http:&#x2F;&#x2F;localhost:8078;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要在服务器提供商的管理网页中开放8078端口。<br>由于使用80端口需要备案，所以可以先用其他端口代替</p>\n<p>后端使用pm2进行运行，假设运行后端程序提供的端口为6543<br>那么该端口也可以通过nginx进行反向代理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 8078;</span><br><span class=\"line\">    server_name api.example.com;</span><br><span class=\"line\">    location &#x2F; &#123;</span><br><span class=\"line\">        proxy_pass http:&#x2F;&#x2F;localhost:6543;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以对外部统一保留8078端口即可，可以根据不同的域名来访问不同的服务。</p>\n<p>参考链接：<br><a href=\"https://blog.csdn.net/wohiusdashi/article/details/89358071\" target=\"_blank\" rel=\"noopener\">mysql安装</a><br><a href=\"https://www.cnblogs.com/roujiamo/p/10824511.html\" target=\"_blank\" rel=\"noopener\">mysql编码设置</a><br><a href=\"https://www.cnblogs.com/i6010/articles/10857543.html\" target=\"_blank\" rel=\"noopener\">pm2相关</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckcimf1rv0000ocuo8aml04gj","category_id":"ckcimf1s80003ocuo1s6qc0d6","_id":"ckcimf1sj000docuog7f7eoc8"},{"post_id":"ckcimf1sd0007ocuo46jvgxkt","category_id":"ckcimf1s80003ocuo1s6qc0d6","_id":"ckcimf1sk000focuoczrvdv3n"},{"post_id":"ckcimf1s60002ocuog7gn9m15","category_id":"ckcimf1s80003ocuo1s6qc0d6","_id":"ckcimf1sl000iocuo726o0ka2"},{"post_id":"ckcimf1sa0004ocuohjh9hkz2","category_id":"ckcimf1s80003ocuo1s6qc0d6","_id":"ckcimf1sm000kocuogi7ma0jz"},{"post_id":"ckcimf1sb0005ocuogkdebhbc","category_id":"ckcimf1sl000hocuob45katnq","_id":"ckcimf1sn000oocuo5lzxavhj"},{"post_id":"ckcimf1sg0009ocuocpoy02kk","category_id":"ckcimf1sl000hocuob45katnq","_id":"ckcimf1so000qocuobcwlhobp"}],"PostTag":[{"post_id":"ckcimf1sa0004ocuohjh9hkz2","tag_id":"ckcimf1sc0006ocuo87v5bpf0","_id":"ckcimf1sk000eocuoh1264dxo"},{"post_id":"ckcimf1sb0005ocuogkdebhbc","tag_id":"ckcimf1sc0006ocuo87v5bpf0","_id":"ckcimf1sl000jocuo4b5ah02d"},{"post_id":"ckcimf1sg0009ocuocpoy02kk","tag_id":"ckcimf1sl000gocuob3urctnn","_id":"ckcimf1sn000nocuo5vv3fi72"},{"post_id":"ckcimf1si000aocuoh5py4vvi","tag_id":"ckcimf1sm000locuog4m7cxqt","_id":"ckcimf1sn000pocuodja62lbb"}],"Tag":[{"name":"C++","_id":"ckcimf1sc0006ocuo87v5bpf0"},{"name":"JavaScript","_id":"ckcimf1sl000gocuob3urctnn"},{"name":"Linux","_id":"ckcimf1sm000locuog4m7cxqt"}]}}